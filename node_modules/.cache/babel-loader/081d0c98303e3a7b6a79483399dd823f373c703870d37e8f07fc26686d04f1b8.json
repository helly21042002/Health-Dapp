{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\truffleproj\\\\healthdapp\\\\trialhealth\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n/*\nimport React, { useState } from \"react\";\nimport Web3 from \"web3\";\nimport MedicalRecordContract from \"../src/contractscopy/MedicalRecord.json\";\n\nconst web3 = new Web3(Web3.givenProvider);\nconst contractAddress = \"YOUR_CONTRACT_ADDRESS_HERE\";\n\nfunction App() {\n  const [name, setName] = useState(\"\");\n  const [diagnosis, setDiagnosis] = useState(\"\");\n  const [treatment, setTreatment] = useState(\"\");\n  const [recordId, setRecordId] = useState(0);\n  const [record, setRecord] = useState({});\n\n  async function createRecord() {\n    const contract = new web3.eth.Contract(MedicalRecordContract.abi, contractAddress);\n    const accounts = await web3.eth.requestAccounts();\n    const account = accounts[0];\n    await contract.methods.createRecord(name, diagnosis, treatment).send({ from: account });\n  }\n\n  async function getRecord() {\n    const contract = new web3.eth.Contract(MedicalRecordContract.abi, contractAddress);\n    const result = await contract.methods.getRecord(recordId).call();\n    setRecord({ name: result[0], diagnosis: result[1], treatment: result[2], date: result[3] });\n  }\n\n  return (\n    <div>\n      <h1>Medical Records Management</h1>\n      <div>\n        <h2>Create Patient Record</h2>\n        <label>\n          Name:\n          <input type=\"text\" value={name} onChange={(e) => setName(e.target.value)} />\n        </label>\n        <br />\n        <label>\n          Diagnosis:\n          <input type=\"text\" value={diagnosis} onChange={(e) => setDiagnosis(e.target.value)} />\n        </label>\n        <br />\n        <label>\n          Treatment:\n          <input type=\"text\" value={treatment} onChange={(e) => setTreatment(e.target.value)} />\n        </label>\n        <br />\n        <button onClick={createRecord}>Create Record</button>\n      </div>\n      <div>\n        <h2>Get Patient Record</h2>\n        <label>\n          Record ID:\n          <input type=\"number\" value={recordId} onChange={(e) => setRecordId(parseInt(e.target.value))} />\n        </label>\n        <br />\n        <button onClick={getRecord}>Get Record</button>\n        <br />\n        <label>\n          Name: {record.name}\n        </label>\n        <br />\n        <label>\n          Diagnosis: {record.diagnosis}\n        </label>\n        <br />\n        <label>\n          Treatment: {record.treatment}\n        </label>\n        <br />\n        <label>\n          Date: {new Date(record.date * 1000).toLocaleDateString()}\n        </label>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n*/\n\n/*\nimport React, { useState } from 'react';\nimport Web3 from 'web3';\nimport DoctorAppointment from '../src/contractscopy/MedicalRecord.json';\n\nconst web3 = new Web3(Web3.givenProvider);\n\nfunction App() {\n  const [doctorAppointment, setDoctorAppointment] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [day, setDay] = useState(0);\n  const [appointmentTime, setAppointmentTime] = useState(0);\n\n  const connectMetaMask = async () => {\n    try {\n      await window.ethereum.request({ method: 'eth_requestAccounts' });\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = DoctorAppointment.networks[networkId];\n      const instance = new web3.eth.Contract(\n        DoctorAppointment.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n      setDoctorAppointment(instance);\n      const accounts = await web3.eth.getAccounts();\n      setAccount(accounts[0]);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const bookAppointment = async () => {\n    const appointmentSlot = appointmentTime / doctorAppointment.appointmentDuration;\n    const isBooked = await doctorAppointment.methods.appointments(day, appointmentSlot).booked().call();\n    if (isBooked) {\n      alert('Appointment already booked');\n      return;\n    }\n    await doctorAppointment.methods.bookAppointment(day, appointmentTime).send({ from: account, value: doctorAppointment.appointmentFee });\n    alert('Appointment booked successfully');\n  };\n\n  const cancelAppointment = async () => {\n    const appointmentSlot = appointmentTime / doctorAppointment.appointmentDuration;\n    const appointment = await doctorAppointment.methods.appointments(day, appointmentSlot).call();\n    if (!appointment.booked) {\n      alert('No appointment found');\n      return;\n    }\n    if (appointment.patient.toLowerCase() !== account.toLowerCase()) {\n      alert('Only patient who booked the appointment can cancel it');\n      return;\n    }\n    if (appointment.paid) {\n      alert('Appointment fee already paid');\n      return;\n    }\n    await doctorAppointment.methods.cancelAppointment(day, appointmentTime).send({ from: account });\n    alert('Appointment canceled successfully');\n  };\n\n  return (\n    <div>\n      {account ? (\n        <div>\n          <p>Account: {account}</p>\n          <p>Appointment duration: {doctorAppointment?.appointmentDuration}</p>\n          <p>Appointment fee: {web3.utils.fromWei(doctorAppointment?.appointmentFee)} ETH</p>\n          <p>Max appointments per day: {doctorAppointment?.maxAppointmentsPerDay}</p>\n          <div>\n            <label>Day: </label>\n            <input type=\"number\" value={day} onChange={(e) => setDay(e.target.value)} />\n          </div>\n          <div>\n            <label>Appointment time: </label>\n            <input type=\"number\" value={appointmentTime} onChange={(e) => setAppointmentTime(e.target.value)} />\n          </div>\n          <button onClick={bookAppointment}>Book appointment</button>\n          <button onClick={cancelAppointment}>Cancel appointment</button>\n        </div>\n      ) : (\n        <button onClick={connectMetaMask}>Connect MetaMask</button>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n\n*/\n/*\nimport React, { useState } from 'react';\nimport Web3 from 'web3';\nimport DoctorAppointment from '../src/contractscopy/MedicalRecord.json';\n\nconst web3 = new Web3(Web3.givenProvider);\n\nfunction App() {\n  const [doctorAppointment, setDoctorAppointment] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [day, setDay] = useState(0);\n  const [appointmentTime, setAppointmentTime] = useState(0);\n\n  const connectMetaMask = async () => {\n    try {\n      await window.ethereum.request({ method: 'eth_requestAccounts' });\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = DoctorAppointment.networks[networkId];\n      const instance = new web3.eth.Contract(\n        DoctorAppointment.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n      setDoctorAppointment(instance);\n      const accounts = await web3.eth.getAccounts();\n      setAccount(accounts[0]);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const bookAppointment = async () => {\n    const appointmentSlot = appointmentTime / doctorAppointment.appointmentDuration;\n    const isBooked = await doctorAppointment.methods.appointments(day, appointmentSlot).booked().call();\n    if (isBooked) {\n      alert('Appointment already booked');\n      return;\n    }\n    await doctorAppointment.methods.bookAppointment(day.toString(), appointmentTime.toString()).send({ from: account, value: doctorAppointment && doctorAppointment.appointmentFee && doctorAppointment.appointmentFee.toString() });\n    alert('Appointment booked successfully');\n  };\n\n  const cancelAppointment = async () => {\n    const appointmentSlot = appointmentTime / doctorAppointment.appointmentDuration;\n    const appointment = await doctorAppointment.methods.appointments(day, appointmentSlot).call();\n    if (!appointment.booked) {\n      alert('No appointment found');\n      return;\n    }\n    if (appointment.patient.toLowerCase() !== account.toLowerCase()) {\n      alert('Only patient who booked the appointment can cancel it');\n      return;\n    }\n    if (appointment.paid) {\n      alert('Appointment fee already paid');\n      return;\n    }\n    await doctorAppointment.methods.cancelAppointment(day.toString(), appointmentTime.toString()).send({ from: account });\n    alert('Appointment canceled successfully');\n  };\n\n  return (\n    <div>\n      {account ? (\n        <div>\n          <p>Account: {account}</p>\n          <p>Appointment duration: {doctorAppointment?.appointmentDuration}</p>\n          <p>Appointment fee: {web3.utils.fromWei(doctorAppointment && doctorAppointment.appointmentFee && doctorAppointment.appointmentFee.toString())} ETH</p>\n          <p>Max appointments per day: {doctorAppointment?.maxAppointmentsPerDay}</p>\n          <div>\n            <label>Day: </label>\n            <input type=\"number\" value={day} onChange={(e) => setDay(e.target.value)} />\n          </div>\n          <div>\n            <label>Appointment time: </label>\n            <input type=\"number\" value={appointmentTime} onChange={(e) => setAppointmentTime(e.target.value)} />\n          </div>\n          <button onClick={bookAppointment}>Book appointment</button>\n          <button onClick={cancelAppointment}>Cancel appointment</button>\n          </div>\n      ) : (\n        <button onClick={connectMetaMask}>Connect with MetaMask</button>\n      )}\n    </div>\n  );\n}\nexport default App;\n\n*/\n\n/*\nimport React, { useState } from \"react\";\nimport Web3 from \"web3\";\nimport BookingAppointement from \"./contracts/BookingAppointement.json\";\n\nconst web3 = new Web3(Web3.givenProvider);\n\nfunction App() {\n  const [bookingAppointement, setBookingAppointement] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [appointmentDate, setAppointmentDate] = useState(\"\");\n  const [checkOutDate, setCheckOutDate] = useState(\"\");\n  const [appointments, setAppointments] = useState([]);\n\n  const connectMetaMask = async () => {\n    try {\n      await window.ethereum.request({ method: \"eth_requestAccounts\" });\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = BookingAppointement.networks[networkId];\n      const instance = new web3.eth.Contract(\n        BookingAppointement.abi,\n        deployedNetwork && deployedNetwork.address\n      );\n      setBookingAppointement(instance);\n      const accounts = await web3.eth.getAccounts();\n      setAccount(accounts[0]);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const createAppointments = async () => {\n    const totalPrice =\n      (checkOutDate - appointmentDate) *\n      web3.utils.toWei(\n        \"1\", // 1 ETH per appointment\n        \"ether\"\n      );\n    await bookingAppointement.methods\n      .createAppointments(appointmentDate, checkOutDate)\n      .send({ from: account, value: totalPrice });\n    alert(\"Appointments created successfully\");\n  };\n\n  const payAppointments = async (appointmentsId) => {\n    await bookingAppointement.methods.payAppointments(appointmentsId).send({\n      from: account,\n    });\n    alert(\"Appointments paid successfully\");\n  };\n\n  const loadAppointments = async () => {\n    const appointmentCount = await bookingAppointement.methods\n      .appointmentCount()\n      .call();\n    const loadedAppointments = [];\n    for (let i = 0; i < appointmentCount; i++) {\n      const appointment = await bookingAppointement.methods\n        .appointment(i)\n        .call();\n      loadedAppointments.push(appointment);\n    }\n    setAppointments(loadedAppointments);\n  };\n\n  return (\n    <div>\n      {account ? (\n        <div>\n          <p>Account: {account}</p>\n          <input\n            type=\"datetime-local\"\n            value={appointmentDate}\n            onChange={(e) => setAppointmentDate(e.target.valueAsNumber)}\n          />\n          <input\n            type=\"datetime-local\"\n            value={checkOutDate}\n            onChange={(e) => setCheckOutDate(e.target.valueAsNumber)}\n          />\n          <button onClick={createAppointments}>Create Appointments</button>\n          <button onClick={loadAppointments}>Load Appointments</button>\n          <ul>\n            {appointments.map((appointment, index) => (\n              <li key={index}>\n                {`Patient: ${appointment.patient}`}\n                {`Appointment Date: ${new Date(\n                  appointment.appointmentDate * 1000\n                ).toLocaleString()}`}\n                {`Check-out Date: ${new Date(\n                  appointment.checkOutDate * 1000\n                ).toLocaleString()}`}\n                {`Total Price: ${web3.utils.fromWei(\n                  appointment.totalPrice.toString(),\n                  \"ether\"\n                )} ETH`}\n                {appointment.paid ? (\n                  <span>Appointments Paid</span>\n                ) : (\n                  <button onClick={() => payAppointments(index)}>\n                    Pay Appointments\n                  </button>\n                )}\n              </li>\n            ))}\n          </ul>\n        </div>\n      ) : (\n        <button onClick={connectMetaMask}>Connect to MetaMask</button>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n*/\n\nimport React, { useState } from \"react\";\nimport Web3 from \"web3\";\nimport AppointmentBooking from \"../src/contractscopy/AppointmentBooking.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst web3 = new Web3(Web3.givenProvider);\nfunction App() {\n  _s();\n  const [appointments, setAppointments] = useState([]);\n  const [appointmentDate, setAppointmentDate] = useState(\"\");\n  const bookAppointment = async () => {\n    const appointmentTimestamp = Date.parse(appointmentDate) / 1000;\n    await appointmentBooking.methods.bookAppointment(appointmentTimestamp).send({\n      from: account,\n      value: web3.utils.toWei(\"1\", \"ether\")\n    });\n    alert(\"Appointment booked successfully\");\n  };\n  const loadAppointments = async () => {\n    const appointmentCount = await appointmentBooking.methods.appointmentCount().call();\n    const loadedAppointments = [];\n    for (let i = 0; i < appointmentCount; i++) {\n      const appointment = await appointmentBooking.methods.appointments(i).call();\n      loadedAppointments.push(appointment);\n    }\n    setAppointments(loadedAppointments);\n  };\n  const getAvailableAppointments = () => {\n    const availableAppointments = appointments.filter(appointment => !appointment.booked && appointment.date > Date.now() / 1000);\n    return availableAppointments;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"datetime-local\",\n      value: appointmentDate,\n      onChange: e => setAppointmentDate(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 417,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: bookAppointment,\n      children: \"Book Appointment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: loadAppointments,\n      children: \"Load Appointments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: getAvailableAppointments().map((appointment, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [`Patient: ${appointment.patient}`, `Appointment Date: ${new Date(appointment.date * 1000).toLocaleString()}`, appointment.booked ? /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Appointment Booked\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 432,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Available\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 434,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 416,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"HSsfSJfn/0C9i8LkyXppLsng7EY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Web3","AppointmentBooking","jsxDEV","_jsxDEV","web3","givenProvider","App","_s","appointments","setAppointments","appointmentDate","setAppointmentDate","bookAppointment","appointmentTimestamp","Date","parse","appointmentBooking","methods","send","from","account","value","utils","toWei","alert","loadAppointments","appointmentCount","call","loadedAppointments","i","appointment","push","getAvailableAppointments","availableAppointments","filter","booked","date","now","children","type","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","index","patient","toLocaleString","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Desktop/truffleproj/healthdapp/trialhealth/src/App.js"],"sourcesContent":["/*\nimport React, { useState } from \"react\";\nimport Web3 from \"web3\";\nimport MedicalRecordContract from \"../src/contractscopy/MedicalRecord.json\";\n\nconst web3 = new Web3(Web3.givenProvider);\nconst contractAddress = \"YOUR_CONTRACT_ADDRESS_HERE\";\n\nfunction App() {\n  const [name, setName] = useState(\"\");\n  const [diagnosis, setDiagnosis] = useState(\"\");\n  const [treatment, setTreatment] = useState(\"\");\n  const [recordId, setRecordId] = useState(0);\n  const [record, setRecord] = useState({});\n\n  async function createRecord() {\n    const contract = new web3.eth.Contract(MedicalRecordContract.abi, contractAddress);\n    const accounts = await web3.eth.requestAccounts();\n    const account = accounts[0];\n    await contract.methods.createRecord(name, diagnosis, treatment).send({ from: account });\n  }\n\n  async function getRecord() {\n    const contract = new web3.eth.Contract(MedicalRecordContract.abi, contractAddress);\n    const result = await contract.methods.getRecord(recordId).call();\n    setRecord({ name: result[0], diagnosis: result[1], treatment: result[2], date: result[3] });\n  }\n\n  return (\n    <div>\n      <h1>Medical Records Management</h1>\n      <div>\n        <h2>Create Patient Record</h2>\n        <label>\n          Name:\n          <input type=\"text\" value={name} onChange={(e) => setName(e.target.value)} />\n        </label>\n        <br />\n        <label>\n          Diagnosis:\n          <input type=\"text\" value={diagnosis} onChange={(e) => setDiagnosis(e.target.value)} />\n        </label>\n        <br />\n        <label>\n          Treatment:\n          <input type=\"text\" value={treatment} onChange={(e) => setTreatment(e.target.value)} />\n        </label>\n        <br />\n        <button onClick={createRecord}>Create Record</button>\n      </div>\n      <div>\n        <h2>Get Patient Record</h2>\n        <label>\n          Record ID:\n          <input type=\"number\" value={recordId} onChange={(e) => setRecordId(parseInt(e.target.value))} />\n        </label>\n        <br />\n        <button onClick={getRecord}>Get Record</button>\n        <br />\n        <label>\n          Name: {record.name}\n        </label>\n        <br />\n        <label>\n          Diagnosis: {record.diagnosis}\n        </label>\n        <br />\n        <label>\n          Treatment: {record.treatment}\n        </label>\n        <br />\n        <label>\n          Date: {new Date(record.date * 1000).toLocaleDateString()}\n        </label>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n*/\n\n/*\nimport React, { useState } from 'react';\nimport Web3 from 'web3';\nimport DoctorAppointment from '../src/contractscopy/MedicalRecord.json';\n\nconst web3 = new Web3(Web3.givenProvider);\n\nfunction App() {\n  const [doctorAppointment, setDoctorAppointment] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [day, setDay] = useState(0);\n  const [appointmentTime, setAppointmentTime] = useState(0);\n\n  const connectMetaMask = async () => {\n    try {\n      await window.ethereum.request({ method: 'eth_requestAccounts' });\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = DoctorAppointment.networks[networkId];\n      const instance = new web3.eth.Contract(\n        DoctorAppointment.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n      setDoctorAppointment(instance);\n      const accounts = await web3.eth.getAccounts();\n      setAccount(accounts[0]);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const bookAppointment = async () => {\n    const appointmentSlot = appointmentTime / doctorAppointment.appointmentDuration;\n    const isBooked = await doctorAppointment.methods.appointments(day, appointmentSlot).booked().call();\n    if (isBooked) {\n      alert('Appointment already booked');\n      return;\n    }\n    await doctorAppointment.methods.bookAppointment(day, appointmentTime).send({ from: account, value: doctorAppointment.appointmentFee });\n    alert('Appointment booked successfully');\n  };\n\n  const cancelAppointment = async () => {\n    const appointmentSlot = appointmentTime / doctorAppointment.appointmentDuration;\n    const appointment = await doctorAppointment.methods.appointments(day, appointmentSlot).call();\n    if (!appointment.booked) {\n      alert('No appointment found');\n      return;\n    }\n    if (appointment.patient.toLowerCase() !== account.toLowerCase()) {\n      alert('Only patient who booked the appointment can cancel it');\n      return;\n    }\n    if (appointment.paid) {\n      alert('Appointment fee already paid');\n      return;\n    }\n    await doctorAppointment.methods.cancelAppointment(day, appointmentTime).send({ from: account });\n    alert('Appointment canceled successfully');\n  };\n\n  return (\n    <div>\n      {account ? (\n        <div>\n          <p>Account: {account}</p>\n          <p>Appointment duration: {doctorAppointment?.appointmentDuration}</p>\n          <p>Appointment fee: {web3.utils.fromWei(doctorAppointment?.appointmentFee)} ETH</p>\n          <p>Max appointments per day: {doctorAppointment?.maxAppointmentsPerDay}</p>\n          <div>\n            <label>Day: </label>\n            <input type=\"number\" value={day} onChange={(e) => setDay(e.target.value)} />\n          </div>\n          <div>\n            <label>Appointment time: </label>\n            <input type=\"number\" value={appointmentTime} onChange={(e) => setAppointmentTime(e.target.value)} />\n          </div>\n          <button onClick={bookAppointment}>Book appointment</button>\n          <button onClick={cancelAppointment}>Cancel appointment</button>\n        </div>\n      ) : (\n        <button onClick={connectMetaMask}>Connect MetaMask</button>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n\n*/\n/*\nimport React, { useState } from 'react';\nimport Web3 from 'web3';\nimport DoctorAppointment from '../src/contractscopy/MedicalRecord.json';\n\nconst web3 = new Web3(Web3.givenProvider);\n\nfunction App() {\n  const [doctorAppointment, setDoctorAppointment] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [day, setDay] = useState(0);\n  const [appointmentTime, setAppointmentTime] = useState(0);\n\n  const connectMetaMask = async () => {\n    try {\n      await window.ethereum.request({ method: 'eth_requestAccounts' });\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = DoctorAppointment.networks[networkId];\n      const instance = new web3.eth.Contract(\n        DoctorAppointment.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n      setDoctorAppointment(instance);\n      const accounts = await web3.eth.getAccounts();\n      setAccount(accounts[0]);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const bookAppointment = async () => {\n    const appointmentSlot = appointmentTime / doctorAppointment.appointmentDuration;\n    const isBooked = await doctorAppointment.methods.appointments(day, appointmentSlot).booked().call();\n    if (isBooked) {\n      alert('Appointment already booked');\n      return;\n    }\n    await doctorAppointment.methods.bookAppointment(day.toString(), appointmentTime.toString()).send({ from: account, value: doctorAppointment && doctorAppointment.appointmentFee && doctorAppointment.appointmentFee.toString() });\n    alert('Appointment booked successfully');\n  };\n\n  const cancelAppointment = async () => {\n    const appointmentSlot = appointmentTime / doctorAppointment.appointmentDuration;\n    const appointment = await doctorAppointment.methods.appointments(day, appointmentSlot).call();\n    if (!appointment.booked) {\n      alert('No appointment found');\n      return;\n    }\n    if (appointment.patient.toLowerCase() !== account.toLowerCase()) {\n      alert('Only patient who booked the appointment can cancel it');\n      return;\n    }\n    if (appointment.paid) {\n      alert('Appointment fee already paid');\n      return;\n    }\n    await doctorAppointment.methods.cancelAppointment(day.toString(), appointmentTime.toString()).send({ from: account });\n    alert('Appointment canceled successfully');\n  };\n\n  return (\n    <div>\n      {account ? (\n        <div>\n          <p>Account: {account}</p>\n          <p>Appointment duration: {doctorAppointment?.appointmentDuration}</p>\n          <p>Appointment fee: {web3.utils.fromWei(doctorAppointment && doctorAppointment.appointmentFee && doctorAppointment.appointmentFee.toString())} ETH</p>\n          <p>Max appointments per day: {doctorAppointment?.maxAppointmentsPerDay}</p>\n          <div>\n            <label>Day: </label>\n            <input type=\"number\" value={day} onChange={(e) => setDay(e.target.value)} />\n          </div>\n          <div>\n            <label>Appointment time: </label>\n            <input type=\"number\" value={appointmentTime} onChange={(e) => setAppointmentTime(e.target.value)} />\n          </div>\n          <button onClick={bookAppointment}>Book appointment</button>\n          <button onClick={cancelAppointment}>Cancel appointment</button>\n          </div>\n      ) : (\n        <button onClick={connectMetaMask}>Connect with MetaMask</button>\n      )}\n    </div>\n  );\n}\nexport default App;\n\n*/\n\n/*\nimport React, { useState } from \"react\";\nimport Web3 from \"web3\";\nimport BookingAppointement from \"./contracts/BookingAppointement.json\";\n\nconst web3 = new Web3(Web3.givenProvider);\n\nfunction App() {\n  const [bookingAppointement, setBookingAppointement] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [appointmentDate, setAppointmentDate] = useState(\"\");\n  const [checkOutDate, setCheckOutDate] = useState(\"\");\n  const [appointments, setAppointments] = useState([]);\n\n  const connectMetaMask = async () => {\n    try {\n      await window.ethereum.request({ method: \"eth_requestAccounts\" });\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = BookingAppointement.networks[networkId];\n      const instance = new web3.eth.Contract(\n        BookingAppointement.abi,\n        deployedNetwork && deployedNetwork.address\n      );\n      setBookingAppointement(instance);\n      const accounts = await web3.eth.getAccounts();\n      setAccount(accounts[0]);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const createAppointments = async () => {\n    const totalPrice =\n      (checkOutDate - appointmentDate) *\n      web3.utils.toWei(\n        \"1\", // 1 ETH per appointment\n        \"ether\"\n      );\n    await bookingAppointement.methods\n      .createAppointments(appointmentDate, checkOutDate)\n      .send({ from: account, value: totalPrice });\n    alert(\"Appointments created successfully\");\n  };\n\n  const payAppointments = async (appointmentsId) => {\n    await bookingAppointement.methods.payAppointments(appointmentsId).send({\n      from: account,\n    });\n    alert(\"Appointments paid successfully\");\n  };\n\n  const loadAppointments = async () => {\n    const appointmentCount = await bookingAppointement.methods\n      .appointmentCount()\n      .call();\n    const loadedAppointments = [];\n    for (let i = 0; i < appointmentCount; i++) {\n      const appointment = await bookingAppointement.methods\n        .appointment(i)\n        .call();\n      loadedAppointments.push(appointment);\n    }\n    setAppointments(loadedAppointments);\n  };\n\n  return (\n    <div>\n      {account ? (\n        <div>\n          <p>Account: {account}</p>\n          <input\n            type=\"datetime-local\"\n            value={appointmentDate}\n            onChange={(e) => setAppointmentDate(e.target.valueAsNumber)}\n          />\n          <input\n            type=\"datetime-local\"\n            value={checkOutDate}\n            onChange={(e) => setCheckOutDate(e.target.valueAsNumber)}\n          />\n          <button onClick={createAppointments}>Create Appointments</button>\n          <button onClick={loadAppointments}>Load Appointments</button>\n          <ul>\n            {appointments.map((appointment, index) => (\n              <li key={index}>\n                {`Patient: ${appointment.patient}`}\n                {`Appointment Date: ${new Date(\n                  appointment.appointmentDate * 1000\n                ).toLocaleString()}`}\n                {`Check-out Date: ${new Date(\n                  appointment.checkOutDate * 1000\n                ).toLocaleString()}`}\n                {`Total Price: ${web3.utils.fromWei(\n                  appointment.totalPrice.toString(),\n                  \"ether\"\n                )} ETH`}\n                {appointment.paid ? (\n                  <span>Appointments Paid</span>\n                ) : (\n                  <button onClick={() => payAppointments(index)}>\n                    Pay Appointments\n                  </button>\n                )}\n              </li>\n            ))}\n          </ul>\n        </div>\n      ) : (\n        <button onClick={connectMetaMask}>Connect to MetaMask</button>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n*/\n\nimport React, { useState } from \"react\";\nimport Web3 from \"web3\";\nimport AppointmentBooking from \"../src/contractscopy/AppointmentBooking.json\";\n\nconst web3 = new Web3(Web3.givenProvider);\n\nfunction App() {\n  const [appointments, setAppointments] = useState([]);\n  const [appointmentDate, setAppointmentDate] = useState(\"\");\n\n  const bookAppointment = async () => {\n    const appointmentTimestamp = Date.parse(appointmentDate) / 1000;\n    await appointmentBooking.methods.bookAppointment(appointmentTimestamp).send({\n      from: account,\n      value: web3.utils.toWei(\"1\", \"ether\"),\n    });\n    alert(\"Appointment booked successfully\");\n  };\n\n  const loadAppointments = async () => {\n    const appointmentCount = await appointmentBooking.methods.appointmentCount().call();\n    const loadedAppointments = [];\n    for (let i = 0; i < appointmentCount; i++) {\n      const appointment = await appointmentBooking.methods.appointments(i).call();\n      loadedAppointments.push(appointment);\n    }\n    setAppointments(loadedAppointments);\n  };\n\n  const getAvailableAppointments = () => {\n    const availableAppointments = appointments.filter(\n      (appointment) => !appointment.booked && appointment.date > Date.now() / 1000\n    );\n    return availableAppointments;\n  };\n\n  return (\n    <div>\n      <input\n        type=\"datetime-local\"\n        value={appointmentDate}\n        onChange={(e) => setAppointmentDate(e.target.value)}\n      />\n      <button onClick={bookAppointment}>Book Appointment</button>\n      <button onClick={loadAppointments}>Load Appointments</button>\n      <ul>\n        {getAvailableAppointments().map((appointment, index) => (\n          <li key={index}>\n            {`Patient: ${appointment.patient}`}\n            {`Appointment Date: ${new Date(\n              appointment.date * 1000\n            ).toLocaleString()}`}\n            {appointment.booked ? (\n              <span>Appointment Booked</span>\n            ) : (\n              <span>Available</span>\n            )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\n\nexport default App;\n"],"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}