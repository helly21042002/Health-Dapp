{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\truffleproj\\\\healthdapp\\\\trialhealth\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n/*\nimport React, { useState } from \"react\";\nimport Web3 from \"web3\";\nimport MedicalRecordContract from \"../src/contractscopy/MedicalRecord.json\";\n\nconst web3 = new Web3(Web3.givenProvider);\nconst contractAddress = \"YOUR_CONTRACT_ADDRESS_HERE\";\n\nfunction App() {\n  const [name, setName] = useState(\"\");\n  const [diagnosis, setDiagnosis] = useState(\"\");\n  const [treatment, setTreatment] = useState(\"\");\n  const [recordId, setRecordId] = useState(0);\n  const [record, setRecord] = useState({});\n\n  async function createRecord() {\n    const contract = new web3.eth.Contract(MedicalRecordContract.abi, contractAddress);\n    const accounts = await web3.eth.requestAccounts();\n    const account = accounts[0];\n    await contract.methods.createRecord(name, diagnosis, treatment).send({ from: account });\n  }\n\n  async function getRecord() {\n    const contract = new web3.eth.Contract(MedicalRecordContract.abi, contractAddress);\n    const result = await contract.methods.getRecord(recordId).call();\n    setRecord({ name: result[0], diagnosis: result[1], treatment: result[2], date: result[3] });\n  }\n\n  return (\n    <div>\n      <h1>Medical Records Management</h1>\n      <div>\n        <h2>Create Patient Record</h2>\n        <label>\n          Name:\n          <input type=\"text\" value={name} onChange={(e) => setName(e.target.value)} />\n        </label>\n        <br />\n        <label>\n          Diagnosis:\n          <input type=\"text\" value={diagnosis} onChange={(e) => setDiagnosis(e.target.value)} />\n        </label>\n        <br />\n        <label>\n          Treatment:\n          <input type=\"text\" value={treatment} onChange={(e) => setTreatment(e.target.value)} />\n        </label>\n        <br />\n        <button onClick={createRecord}>Create Record</button>\n      </div>\n      <div>\n        <h2>Get Patient Record</h2>\n        <label>\n          Record ID:\n          <input type=\"number\" value={recordId} onChange={(e) => setRecordId(parseInt(e.target.value))} />\n        </label>\n        <br />\n        <button onClick={getRecord}>Get Record</button>\n        <br />\n        <label>\n          Name: {record.name}\n        </label>\n        <br />\n        <label>\n          Diagnosis: {record.diagnosis}\n        </label>\n        <br />\n        <label>\n          Treatment: {record.treatment}\n        </label>\n        <br />\n        <label>\n          Date: {new Date(record.date * 1000).toLocaleDateString()}\n        </label>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n*/\n\n/*\nimport React, { useState } from 'react';\nimport Web3 from 'web3';\nimport DoctorAppointment from '../src/contractscopy/MedicalRecord.json';\n\nconst web3 = new Web3(Web3.givenProvider);\n\nfunction App() {\n  const [doctorAppointment, setDoctorAppointment] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [day, setDay] = useState(0);\n  const [appointmentTime, setAppointmentTime] = useState(0);\n\n  const connectMetaMask = async () => {\n    try {\n      await window.ethereum.request({ method: 'eth_requestAccounts' });\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = DoctorAppointment.networks[networkId];\n      const instance = new web3.eth.Contract(\n        DoctorAppointment.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n      setDoctorAppointment(instance);\n      const accounts = await web3.eth.getAccounts();\n      setAccount(accounts[0]);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const bookAppointment = async () => {\n    const appointmentSlot = appointmentTime / doctorAppointment.appointmentDuration;\n    const isBooked = await doctorAppointment.methods.appointments(day, appointmentSlot).booked().call();\n    if (isBooked) {\n      alert('Appointment already booked');\n      return;\n    }\n    await doctorAppointment.methods.bookAppointment(day, appointmentTime).send({ from: account, value: doctorAppointment.appointmentFee });\n    alert('Appointment booked successfully');\n  };\n\n  const cancelAppointment = async () => {\n    const appointmentSlot = appointmentTime / doctorAppointment.appointmentDuration;\n    const appointment = await doctorAppointment.methods.appointments(day, appointmentSlot).call();\n    if (!appointment.booked) {\n      alert('No appointment found');\n      return;\n    }\n    if (appointment.patient.toLowerCase() !== account.toLowerCase()) {\n      alert('Only patient who booked the appointment can cancel it');\n      return;\n    }\n    if (appointment.paid) {\n      alert('Appointment fee already paid');\n      return;\n    }\n    await doctorAppointment.methods.cancelAppointment(day, appointmentTime).send({ from: account });\n    alert('Appointment canceled successfully');\n  };\n\n  return (\n    <div>\n      {account ? (\n        <div>\n          <p>Account: {account}</p>\n          <p>Appointment duration: {doctorAppointment?.appointmentDuration}</p>\n          <p>Appointment fee: {web3.utils.fromWei(doctorAppointment?.appointmentFee)} ETH</p>\n          <p>Max appointments per day: {doctorAppointment?.maxAppointmentsPerDay}</p>\n          <div>\n            <label>Day: </label>\n            <input type=\"number\" value={day} onChange={(e) => setDay(e.target.value)} />\n          </div>\n          <div>\n            <label>Appointment time: </label>\n            <input type=\"number\" value={appointmentTime} onChange={(e) => setAppointmentTime(e.target.value)} />\n          </div>\n          <button onClick={bookAppointment}>Book appointment</button>\n          <button onClick={cancelAppointment}>Cancel appointment</button>\n        </div>\n      ) : (\n        <button onClick={connectMetaMask}>Connect MetaMask</button>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n\n*/\n/*\nimport React, { useState } from 'react';\nimport Web3 from 'web3';\nimport DoctorAppointment from '../src/contractscopy/MedicalRecord.json';\n\nconst web3 = new Web3(Web3.givenProvider);\n\nfunction App() {\n  const [doctorAppointment, setDoctorAppointment] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [day, setDay] = useState(0);\n  const [appointmentTime, setAppointmentTime] = useState(0);\n\n  const connectMetaMask = async () => {\n    try {\n      await window.ethereum.request({ method: 'eth_requestAccounts' });\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = DoctorAppointment.networks[networkId];\n      const instance = new web3.eth.Contract(\n        DoctorAppointment.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n      setDoctorAppointment(instance);\n      const accounts = await web3.eth.getAccounts();\n      setAccount(accounts[0]);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const bookAppointment = async () => {\n    const appointmentSlot = appointmentTime / doctorAppointment.appointmentDuration;\n    const isBooked = await doctorAppointment.methods.appointments(day, appointmentSlot).booked().call();\n    if (isBooked) {\n      alert('Appointment already booked');\n      return;\n    }\n    await doctorAppointment.methods.bookAppointment(day.toString(), appointmentTime.toString()).send({ from: account, value: doctorAppointment && doctorAppointment.appointmentFee && doctorAppointment.appointmentFee.toString() });\n    alert('Appointment booked successfully');\n  };\n\n  const cancelAppointment = async () => {\n    const appointmentSlot = appointmentTime / doctorAppointment.appointmentDuration;\n    const appointment = await doctorAppointment.methods.appointments(day, appointmentSlot).call();\n    if (!appointment.booked) {\n      alert('No appointment found');\n      return;\n    }\n    if (appointment.patient.toLowerCase() !== account.toLowerCase()) {\n      alert('Only patient who booked the appointment can cancel it');\n      return;\n    }\n    if (appointment.paid) {\n      alert('Appointment fee already paid');\n      return;\n    }\n    await doctorAppointment.methods.cancelAppointment(day.toString(), appointmentTime.toString()).send({ from: account });\n    alert('Appointment canceled successfully');\n  };\n\n  return (\n    <div>\n      {account ? (\n        <div>\n          <p>Account: {account}</p>\n          <p>Appointment duration: {doctorAppointment?.appointmentDuration}</p>\n          <p>Appointment fee: {web3.utils.fromWei(doctorAppointment && doctorAppointment.appointmentFee && doctorAppointment.appointmentFee.toString())} ETH</p>\n          <p>Max appointments per day: {doctorAppointment?.maxAppointmentsPerDay}</p>\n          <div>\n            <label>Day: </label>\n            <input type=\"number\" value={day} onChange={(e) => setDay(e.target.value)} />\n          </div>\n          <div>\n            <label>Appointment time: </label>\n            <input type=\"number\" value={appointmentTime} onChange={(e) => setAppointmentTime(e.target.value)} />\n          </div>\n          <button onClick={bookAppointment}>Book appointment</button>\n          <button onClick={cancelAppointment}>Cancel appointment</button>\n          </div>\n      ) : (\n        <button onClick={connectMetaMask}>Connect with MetaMask</button>\n      )}\n    </div>\n  );\n}\nexport default App;\n\n*/\n\n/*\nimport React, { useState } from \"react\";\nimport Web3 from \"web3\";\nimport BookingAppointement from \"./contracts/BookingAppointement.json\";\n\nconst web3 = new Web3(Web3.givenProvider);\n\nfunction App() {\n  const [bookingAppointement, setBookingAppointement] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [appointmentDate, setAppointmentDate] = useState(\"\");\n  const [checkOutDate, setCheckOutDate] = useState(\"\");\n  const [appointments, setAppointments] = useState([]);\n\n  const connectMetaMask = async () => {\n    try {\n      await window.ethereum.request({ method: \"eth_requestAccounts\" });\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = BookingAppointement.networks[networkId];\n      const instance = new web3.eth.Contract(\n        BookingAppointement.abi,\n        deployedNetwork && deployedNetwork.address\n      );\n      setBookingAppointement(instance);\n      const accounts = await web3.eth.getAccounts();\n      setAccount(accounts[0]);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const createAppointments = async () => {\n    const totalPrice =\n      (checkOutDate - appointmentDate) *\n      web3.utils.toWei(\n        \"1\", // 1 ETH per appointment\n        \"ether\"\n      );\n    await bookingAppointement.methods\n      .createAppointments(appointmentDate, checkOutDate)\n      .send({ from: account, value: totalPrice });\n    alert(\"Appointments created successfully\");\n  };\n\n  const payAppointments = async (appointmentsId) => {\n    await bookingAppointement.methods.payAppointments(appointmentsId).send({\n      from: account,\n    });\n    alert(\"Appointments paid successfully\");\n  };\n\n  const loadAppointments = async () => {\n    const appointmentCount = await bookingAppointement.methods\n      .appointmentCount()\n      .call();\n    const loadedAppointments = [];\n    for (let i = 0; i < appointmentCount; i++) {\n      const appointment = await bookingAppointement.methods\n        .appointment(i)\n        .call();\n      loadedAppointments.push(appointment);\n    }\n    setAppointments(loadedAppointments);\n  };\n\n  return (\n    <div>\n      {account ? (\n        <div>\n          <p>Account: {account}</p>\n          <input\n            type=\"datetime-local\"\n            value={appointmentDate}\n            onChange={(e) => setAppointmentDate(e.target.valueAsNumber)}\n          />\n          <input\n            type=\"datetime-local\"\n            value={checkOutDate}\n            onChange={(e) => setCheckOutDate(e.target.valueAsNumber)}\n          />\n          <button onClick={createAppointments}>Create Appointments</button>\n          <button onClick={loadAppointments}>Load Appointments</button>\n          <ul>\n            {appointments.map((appointment, index) => (\n              <li key={index}>\n                {`Patient: ${appointment.patient}`}\n                {`Appointment Date: ${new Date(\n                  appointment.appointmentDate * 1000\n                ).toLocaleString()}`}\n                {`Check-out Date: ${new Date(\n                  appointment.checkOutDate * 1000\n                ).toLocaleString()}`}\n                {`Total Price: ${web3.utils.fromWei(\n                  appointment.totalPrice.toString(),\n                  \"ether\"\n                )} ETH`}\n                {appointment.paid ? (\n                  <span>Appointments Paid</span>\n                ) : (\n                  <button onClick={() => payAppointments(index)}>\n                    Pay Appointments\n                  </button>\n                )}\n              </li>\n            ))}\n          </ul>\n        </div>\n      ) : (\n        <button onClick={connectMetaMask}>Connect to MetaMask</button>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n*/\n/*\nimport React, { useState } from \"react\";\nimport Web3 from \"web3\";\nimport AppointmentBooking from \"../src/contractscopy/AppointmentBooking.json\";\n\nconst web3 = new Web3(Web3.givenProvider);\n\nfunction App() {\n  const [appointments, setAppointments] = useState([]);\n  const [appointmentDate, setAppointmentDate] = useState(\"\");\n\n  const bookAppointment = async () => {\n    const appointmentTimestamp = Date.parse(appointmentDate) / 1000;\n    await appointmentBooking.methods.bookAppointment(appointmentTimestamp).send({\n      from: account,\n      value: web3.utils.toWei(\"1\", \"ether\"),\n    });\n    alert(\"Appointment booked successfully\");\n  };\n\n  const loadAppointments = async () => {\n    const appointmentCount = await appointmentBooking.methods.appointmentCount().call();\n    const loadedAppointments = [];\n    for (let i = 0; i < appointmentCount; i++) {\n      const appointment = await appointmentBooking.methods.appointments(i).call();\n      loadedAppointments.push(appointment);\n    }\n    setAppointments(loadedAppointments);\n  };\n\n  const getAvailableAppointments = () => {\n    const availableAppointments = appointments.filter(\n      (appointment) => !appointment.booked && appointment.date > Date.now() / 1000\n    );\n    return availableAppointments;\n  };\n\n  return (\n    <div>\n      <input\n        type=\"datetime-local\"\n        value={appointmentDate}\n        onChange={(e) => setAppointmentDate(e.target.value)}\n      />\n      <button onClick={bookAppointment}>Book Appointment</button>\n      <button onClick={loadAppointments}>Load Appointments</button>\n      <ul>\n        {getAvailableAppointments().map((appointment, index) => (\n          <li key={index}>\n            {`Patient: ${appointment.patient}`}\n            {`Appointment Date: ${new Date(\n              appointment.date * 1000\n            ).toLocaleString()}`}\n            {appointment.booked ? (\n              <span>Appointment Booked</span>\n            ) : (\n              <span>Available</span>\n            )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\n\nexport default App;*/\nimport React, { useState } from \"react\";\nimport Web3 from \"web3\";\nimport BookingRoomContract from \"../src/contractsCopy/BookingRoom.json\";\nimport bg from '../src/wallpaper.jpg';\nimport '../src/App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [web3, setWeb3] = useState(null);\n  const [accounts, setAccounts] = useState([]);\n  const [contract, setContract] = useState(null);\n  const [reservations, setReservations] = useState([]);\n  const [checkInDate, setCheckInDate] = useState(\"\");\n  const [checkOutDate, setCheckOutDate] = useState(\"\");\n  const [roomNumber, setRoomNumber] = useState(1);\n  const [totalPrice, setTotalPrice] = useState(0);\n  const loadWeb3 = async () => {\n    if (window.ethereum) {\n      await window.ethereum.enable();\n      const web3 = new Web3(window.ethereum);\n      setWeb3(web3);\n      const accounts = await web3.eth.getAccounts();\n      setAccounts(accounts);\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = BookingRoomContract.networks[networkId];\n      const contract = new web3.eth.Contract(BookingRoomContract.abi, deployedNetwork && deployedNetwork.address);\n      setContract(contract);\n      const reservationsCount = await contract.methods.reservationsCount().call();\n      const reservations = [];\n      for (let i = 0; i < reservationsCount; i++) {\n        const reservation = await contract.methods.reservations(i).call();\n        reservations.push(reservation);\n      }\n      setReservations(reservations);\n    } else {\n      alert(\"Please install MetaMask to use this dApp.\");\n    }\n  };\n  const createReservation = async () => {\n    const checkInDateUnix = new DateTime(checkInDate).getTime() / 1000;\n    const checkOutDateUnix = new Date(checkOutDate).getTime() / 1000;\n    const totalPriceWei = web3.utils.toWei(totalPrice.toString(), \"ether\");\n    await contract.methods.createReservation(checkInDateUnix, checkOutDateUnix, roomNumber).send({\n      from: accounts[0],\n      value: totalPriceWei\n    });\n    setReservations([...reservations, {\n      guest: accounts[0],\n      checkInDate: checkInDateUnix,\n      checkOutDate: checkOutDateUnix,\n      roomNumber,\n      totalPrice: totalPriceWei,\n      paid: true\n    }]);\n  };\n  const payReservation = async reservationId => {\n    const reservation = reservations[reservationId];\n    await contract.methods.payReservation(reservationId).send({\n      from: accounts[0]\n    });\n    reservation.paid = true;\n    setReservations([...reservations.slice(0, reservationId), reservation, ...reservations.slice(reservationId + 1)]);\n  };\n  if (!web3) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: loadWeb3,\n        children: \"Connect to MetaMask\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 526,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 525,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"background\",\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 533,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"back\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        class: \"heading\",\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"ChainStay- Booking Room dApp\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 536,\n          columnNumber: 27\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 536,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        class: \"labh\",\n        children: \"Create a Reservation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 537,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        class: \"lab\",\n        children: \"Check-in Date:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 539,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        class: \"inputs\",\n        type: \"date\",\n        value: checkInDate,\n        onChange: e => setCheckInDate(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 540,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 545,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        class: \"lab\",\n        children: \"Check-out Date:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 546,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        class: \"inputs\",\n        type: \"date\",\n        value: checkOutDate,\n        onChange: e => setCheckOutDate(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 547,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 552,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        class: \"lab\",\n        children: \"Room Number:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 553,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        class: \"inputs\",\n        type: \"number\",\n        min: \"1\",\n        max: \"10\",\n        value: roomNumber,\n        onChange: e => setRoomNumber(parseInt(e.target.value))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 554,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 561,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        class: \"lab\",\n        children: \"Total Price:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 562,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        class: \"inputs\",\n        type: \"number\",\n        step: \"0.01\",\n        value: totalPrice,\n        onChange: e => setTotalPrice(parseFloat(e.target.value))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 563,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 569,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        class: \"reserve-button\",\n        onClick: createReservation,\n        children: \"Create Reservation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 570,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 571,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 572,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 534,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        class: \"res_head\",\n        children: /*#__PURE__*/_jsxDEV(\"u\", {\n          children: \"Reservations\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 575,\n          columnNumber: 30\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 575,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        border: \"1\",\n        class: \"edit back\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            class: \"tr\",\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              class: \"th\",\n              children: \"Guest\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 579,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              class: \"th\",\n              children: \"Check-in Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 580,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              class: \"th\",\n              children: \"Check-out Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 581,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              class: \"th\",\n              children: \"Room Number\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 582,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              class: \"th\",\n              children: \"Total Price\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 583,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              class: \"th\",\n              children: \"Paid\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 584,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              class: \"th\",\n              children: \"Action\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 585,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 578,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 577,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: reservations.map((reservation, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: reservation.guest\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 591,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: new Date(reservation.checkInDate * 1000).toLocaleDateString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 592,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: new Date(reservation.checkOutDate * 1000).toLocaleDateString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 597,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: reservation.roomNumber\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 602,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: web3.utils.fromWei(reservation.totalPrice.toString(), \"ether\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 603,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: reservation.paid ? \"Yes\" : \"No\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 609,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: !reservation.paid && /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => payReservation(index),\n                children: \"Pay\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 612,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 610,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 590,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 588,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 576,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 619,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 574,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 532,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"MPIH+dwHZQjuM3bvD4HqzfhGzcY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Web3","BookingRoomContract","bg","jsxDEV","_jsxDEV","App","_s","web3","setWeb3","accounts","setAccounts","contract","setContract","reservations","setReservations","checkInDate","setCheckInDate","checkOutDate","setCheckOutDate","roomNumber","setRoomNumber","totalPrice","setTotalPrice","loadWeb3","window","ethereum","enable","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","Contract","abi","address","reservationsCount","methods","call","i","reservation","push","alert","createReservation","checkInDateUnix","DateTime","getTime","checkOutDateUnix","Date","totalPriceWei","utils","toWei","toString","send","from","value","guest","paid","payReservation","reservationId","slice","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","class","type","onChange","e","target","min","max","parseInt","step","parseFloat","border","map","index","toLocaleDateString","fromWei","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Desktop/truffleproj/healthdapp/trialhealth/src/App.js"],"sourcesContent":["/*\nimport React, { useState } from \"react\";\nimport Web3 from \"web3\";\nimport MedicalRecordContract from \"../src/contractscopy/MedicalRecord.json\";\n\nconst web3 = new Web3(Web3.givenProvider);\nconst contractAddress = \"YOUR_CONTRACT_ADDRESS_HERE\";\n\nfunction App() {\n  const [name, setName] = useState(\"\");\n  const [diagnosis, setDiagnosis] = useState(\"\");\n  const [treatment, setTreatment] = useState(\"\");\n  const [recordId, setRecordId] = useState(0);\n  const [record, setRecord] = useState({});\n\n  async function createRecord() {\n    const contract = new web3.eth.Contract(MedicalRecordContract.abi, contractAddress);\n    const accounts = await web3.eth.requestAccounts();\n    const account = accounts[0];\n    await contract.methods.createRecord(name, diagnosis, treatment).send({ from: account });\n  }\n\n  async function getRecord() {\n    const contract = new web3.eth.Contract(MedicalRecordContract.abi, contractAddress);\n    const result = await contract.methods.getRecord(recordId).call();\n    setRecord({ name: result[0], diagnosis: result[1], treatment: result[2], date: result[3] });\n  }\n\n  return (\n    <div>\n      <h1>Medical Records Management</h1>\n      <div>\n        <h2>Create Patient Record</h2>\n        <label>\n          Name:\n          <input type=\"text\" value={name} onChange={(e) => setName(e.target.value)} />\n        </label>\n        <br />\n        <label>\n          Diagnosis:\n          <input type=\"text\" value={diagnosis} onChange={(e) => setDiagnosis(e.target.value)} />\n        </label>\n        <br />\n        <label>\n          Treatment:\n          <input type=\"text\" value={treatment} onChange={(e) => setTreatment(e.target.value)} />\n        </label>\n        <br />\n        <button onClick={createRecord}>Create Record</button>\n      </div>\n      <div>\n        <h2>Get Patient Record</h2>\n        <label>\n          Record ID:\n          <input type=\"number\" value={recordId} onChange={(e) => setRecordId(parseInt(e.target.value))} />\n        </label>\n        <br />\n        <button onClick={getRecord}>Get Record</button>\n        <br />\n        <label>\n          Name: {record.name}\n        </label>\n        <br />\n        <label>\n          Diagnosis: {record.diagnosis}\n        </label>\n        <br />\n        <label>\n          Treatment: {record.treatment}\n        </label>\n        <br />\n        <label>\n          Date: {new Date(record.date * 1000).toLocaleDateString()}\n        </label>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n*/\n\n/*\nimport React, { useState } from 'react';\nimport Web3 from 'web3';\nimport DoctorAppointment from '../src/contractscopy/MedicalRecord.json';\n\nconst web3 = new Web3(Web3.givenProvider);\n\nfunction App() {\n  const [doctorAppointment, setDoctorAppointment] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [day, setDay] = useState(0);\n  const [appointmentTime, setAppointmentTime] = useState(0);\n\n  const connectMetaMask = async () => {\n    try {\n      await window.ethereum.request({ method: 'eth_requestAccounts' });\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = DoctorAppointment.networks[networkId];\n      const instance = new web3.eth.Contract(\n        DoctorAppointment.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n      setDoctorAppointment(instance);\n      const accounts = await web3.eth.getAccounts();\n      setAccount(accounts[0]);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const bookAppointment = async () => {\n    const appointmentSlot = appointmentTime / doctorAppointment.appointmentDuration;\n    const isBooked = await doctorAppointment.methods.appointments(day, appointmentSlot).booked().call();\n    if (isBooked) {\n      alert('Appointment already booked');\n      return;\n    }\n    await doctorAppointment.methods.bookAppointment(day, appointmentTime).send({ from: account, value: doctorAppointment.appointmentFee });\n    alert('Appointment booked successfully');\n  };\n\n  const cancelAppointment = async () => {\n    const appointmentSlot = appointmentTime / doctorAppointment.appointmentDuration;\n    const appointment = await doctorAppointment.methods.appointments(day, appointmentSlot).call();\n    if (!appointment.booked) {\n      alert('No appointment found');\n      return;\n    }\n    if (appointment.patient.toLowerCase() !== account.toLowerCase()) {\n      alert('Only patient who booked the appointment can cancel it');\n      return;\n    }\n    if (appointment.paid) {\n      alert('Appointment fee already paid');\n      return;\n    }\n    await doctorAppointment.methods.cancelAppointment(day, appointmentTime).send({ from: account });\n    alert('Appointment canceled successfully');\n  };\n\n  return (\n    <div>\n      {account ? (\n        <div>\n          <p>Account: {account}</p>\n          <p>Appointment duration: {doctorAppointment?.appointmentDuration}</p>\n          <p>Appointment fee: {web3.utils.fromWei(doctorAppointment?.appointmentFee)} ETH</p>\n          <p>Max appointments per day: {doctorAppointment?.maxAppointmentsPerDay}</p>\n          <div>\n            <label>Day: </label>\n            <input type=\"number\" value={day} onChange={(e) => setDay(e.target.value)} />\n          </div>\n          <div>\n            <label>Appointment time: </label>\n            <input type=\"number\" value={appointmentTime} onChange={(e) => setAppointmentTime(e.target.value)} />\n          </div>\n          <button onClick={bookAppointment}>Book appointment</button>\n          <button onClick={cancelAppointment}>Cancel appointment</button>\n        </div>\n      ) : (\n        <button onClick={connectMetaMask}>Connect MetaMask</button>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n\n*/\n/*\nimport React, { useState } from 'react';\nimport Web3 from 'web3';\nimport DoctorAppointment from '../src/contractscopy/MedicalRecord.json';\n\nconst web3 = new Web3(Web3.givenProvider);\n\nfunction App() {\n  const [doctorAppointment, setDoctorAppointment] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [day, setDay] = useState(0);\n  const [appointmentTime, setAppointmentTime] = useState(0);\n\n  const connectMetaMask = async () => {\n    try {\n      await window.ethereum.request({ method: 'eth_requestAccounts' });\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = DoctorAppointment.networks[networkId];\n      const instance = new web3.eth.Contract(\n        DoctorAppointment.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n      setDoctorAppointment(instance);\n      const accounts = await web3.eth.getAccounts();\n      setAccount(accounts[0]);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const bookAppointment = async () => {\n    const appointmentSlot = appointmentTime / doctorAppointment.appointmentDuration;\n    const isBooked = await doctorAppointment.methods.appointments(day, appointmentSlot).booked().call();\n    if (isBooked) {\n      alert('Appointment already booked');\n      return;\n    }\n    await doctorAppointment.methods.bookAppointment(day.toString(), appointmentTime.toString()).send({ from: account, value: doctorAppointment && doctorAppointment.appointmentFee && doctorAppointment.appointmentFee.toString() });\n    alert('Appointment booked successfully');\n  };\n\n  const cancelAppointment = async () => {\n    const appointmentSlot = appointmentTime / doctorAppointment.appointmentDuration;\n    const appointment = await doctorAppointment.methods.appointments(day, appointmentSlot).call();\n    if (!appointment.booked) {\n      alert('No appointment found');\n      return;\n    }\n    if (appointment.patient.toLowerCase() !== account.toLowerCase()) {\n      alert('Only patient who booked the appointment can cancel it');\n      return;\n    }\n    if (appointment.paid) {\n      alert('Appointment fee already paid');\n      return;\n    }\n    await doctorAppointment.methods.cancelAppointment(day.toString(), appointmentTime.toString()).send({ from: account });\n    alert('Appointment canceled successfully');\n  };\n\n  return (\n    <div>\n      {account ? (\n        <div>\n          <p>Account: {account}</p>\n          <p>Appointment duration: {doctorAppointment?.appointmentDuration}</p>\n          <p>Appointment fee: {web3.utils.fromWei(doctorAppointment && doctorAppointment.appointmentFee && doctorAppointment.appointmentFee.toString())} ETH</p>\n          <p>Max appointments per day: {doctorAppointment?.maxAppointmentsPerDay}</p>\n          <div>\n            <label>Day: </label>\n            <input type=\"number\" value={day} onChange={(e) => setDay(e.target.value)} />\n          </div>\n          <div>\n            <label>Appointment time: </label>\n            <input type=\"number\" value={appointmentTime} onChange={(e) => setAppointmentTime(e.target.value)} />\n          </div>\n          <button onClick={bookAppointment}>Book appointment</button>\n          <button onClick={cancelAppointment}>Cancel appointment</button>\n          </div>\n      ) : (\n        <button onClick={connectMetaMask}>Connect with MetaMask</button>\n      )}\n    </div>\n  );\n}\nexport default App;\n\n*/\n\n/*\nimport React, { useState } from \"react\";\nimport Web3 from \"web3\";\nimport BookingAppointement from \"./contracts/BookingAppointement.json\";\n\nconst web3 = new Web3(Web3.givenProvider);\n\nfunction App() {\n  const [bookingAppointement, setBookingAppointement] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [appointmentDate, setAppointmentDate] = useState(\"\");\n  const [checkOutDate, setCheckOutDate] = useState(\"\");\n  const [appointments, setAppointments] = useState([]);\n\n  const connectMetaMask = async () => {\n    try {\n      await window.ethereum.request({ method: \"eth_requestAccounts\" });\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = BookingAppointement.networks[networkId];\n      const instance = new web3.eth.Contract(\n        BookingAppointement.abi,\n        deployedNetwork && deployedNetwork.address\n      );\n      setBookingAppointement(instance);\n      const accounts = await web3.eth.getAccounts();\n      setAccount(accounts[0]);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const createAppointments = async () => {\n    const totalPrice =\n      (checkOutDate - appointmentDate) *\n      web3.utils.toWei(\n        \"1\", // 1 ETH per appointment\n        \"ether\"\n      );\n    await bookingAppointement.methods\n      .createAppointments(appointmentDate, checkOutDate)\n      .send({ from: account, value: totalPrice });\n    alert(\"Appointments created successfully\");\n  };\n\n  const payAppointments = async (appointmentsId) => {\n    await bookingAppointement.methods.payAppointments(appointmentsId).send({\n      from: account,\n    });\n    alert(\"Appointments paid successfully\");\n  };\n\n  const loadAppointments = async () => {\n    const appointmentCount = await bookingAppointement.methods\n      .appointmentCount()\n      .call();\n    const loadedAppointments = [];\n    for (let i = 0; i < appointmentCount; i++) {\n      const appointment = await bookingAppointement.methods\n        .appointment(i)\n        .call();\n      loadedAppointments.push(appointment);\n    }\n    setAppointments(loadedAppointments);\n  };\n\n  return (\n    <div>\n      {account ? (\n        <div>\n          <p>Account: {account}</p>\n          <input\n            type=\"datetime-local\"\n            value={appointmentDate}\n            onChange={(e) => setAppointmentDate(e.target.valueAsNumber)}\n          />\n          <input\n            type=\"datetime-local\"\n            value={checkOutDate}\n            onChange={(e) => setCheckOutDate(e.target.valueAsNumber)}\n          />\n          <button onClick={createAppointments}>Create Appointments</button>\n          <button onClick={loadAppointments}>Load Appointments</button>\n          <ul>\n            {appointments.map((appointment, index) => (\n              <li key={index}>\n                {`Patient: ${appointment.patient}`}\n                {`Appointment Date: ${new Date(\n                  appointment.appointmentDate * 1000\n                ).toLocaleString()}`}\n                {`Check-out Date: ${new Date(\n                  appointment.checkOutDate * 1000\n                ).toLocaleString()}`}\n                {`Total Price: ${web3.utils.fromWei(\n                  appointment.totalPrice.toString(),\n                  \"ether\"\n                )} ETH`}\n                {appointment.paid ? (\n                  <span>Appointments Paid</span>\n                ) : (\n                  <button onClick={() => payAppointments(index)}>\n                    Pay Appointments\n                  </button>\n                )}\n              </li>\n            ))}\n          </ul>\n        </div>\n      ) : (\n        <button onClick={connectMetaMask}>Connect to MetaMask</button>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n*/\n/*\nimport React, { useState } from \"react\";\nimport Web3 from \"web3\";\nimport AppointmentBooking from \"../src/contractscopy/AppointmentBooking.json\";\n\nconst web3 = new Web3(Web3.givenProvider);\n\nfunction App() {\n  const [appointments, setAppointments] = useState([]);\n  const [appointmentDate, setAppointmentDate] = useState(\"\");\n\n  const bookAppointment = async () => {\n    const appointmentTimestamp = Date.parse(appointmentDate) / 1000;\n    await appointmentBooking.methods.bookAppointment(appointmentTimestamp).send({\n      from: account,\n      value: web3.utils.toWei(\"1\", \"ether\"),\n    });\n    alert(\"Appointment booked successfully\");\n  };\n\n  const loadAppointments = async () => {\n    const appointmentCount = await appointmentBooking.methods.appointmentCount().call();\n    const loadedAppointments = [];\n    for (let i = 0; i < appointmentCount; i++) {\n      const appointment = await appointmentBooking.methods.appointments(i).call();\n      loadedAppointments.push(appointment);\n    }\n    setAppointments(loadedAppointments);\n  };\n\n  const getAvailableAppointments = () => {\n    const availableAppointments = appointments.filter(\n      (appointment) => !appointment.booked && appointment.date > Date.now() / 1000\n    );\n    return availableAppointments;\n  };\n\n  return (\n    <div>\n      <input\n        type=\"datetime-local\"\n        value={appointmentDate}\n        onChange={(e) => setAppointmentDate(e.target.value)}\n      />\n      <button onClick={bookAppointment}>Book Appointment</button>\n      <button onClick={loadAppointments}>Load Appointments</button>\n      <ul>\n        {getAvailableAppointments().map((appointment, index) => (\n          <li key={index}>\n            {`Patient: ${appointment.patient}`}\n            {`Appointment Date: ${new Date(\n              appointment.date * 1000\n            ).toLocaleString()}`}\n            {appointment.booked ? (\n              <span>Appointment Booked</span>\n            ) : (\n              <span>Available</span>\n            )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\n\nexport default App;*/\nimport React, { useState } from \"react\";\nimport Web3 from \"web3\";\nimport BookingRoomContract from \"../src/contractsCopy/BookingRoom.json\";\nimport bg from '../src/wallpaper.jpg';\nimport '../src/App.css';\n\n\nfunction App() {\n  const [web3, setWeb3] = useState(null);\n  const [accounts, setAccounts] = useState([]);\n  const [contract, setContract] = useState(null);\n  const [reservations, setReservations] = useState([]);\n  const [checkInDate, setCheckInDate] = useState(\"\");\n  const [checkOutDate, setCheckOutDate] = useState(\"\");\n  const [roomNumber, setRoomNumber] = useState(1);\n  const [totalPrice, setTotalPrice] = useState(0);\n\n  const loadWeb3 = async () => {\n    if (window.ethereum) {\n      await window.ethereum.enable();\n      const web3 = new Web3(window.ethereum);\n      setWeb3(web3);\n      const accounts = await web3.eth.getAccounts();\n      setAccounts(accounts);\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = BookingRoomContract.networks[networkId];\n      const contract = new web3.eth.Contract(\n        BookingRoomContract.abi,\n        deployedNetwork && deployedNetwork.address\n      );\n      setContract(contract);\n      const reservationsCount = await contract.methods\n        .reservationsCount()\n        .call();\n      const reservations = [];\n      for (let i = 0; i < reservationsCount; i++) {\n        const reservation = await contract.methods.reservations(i).call();\n        reservations.push(reservation);\n      }\n      setReservations(reservations);\n    } else {\n      alert(\"Please install MetaMask to use this dApp.\");\n    }\n  };\n\n  const createReservation = async () => {\n    const checkInDateUnix = new DateTime(checkInDate).getTime() / 1000;\n    const checkOutDateUnix = new Date(checkOutDate).getTime() / 1000;\n    const totalPriceWei = web3.utils.toWei(totalPrice.toString(), \"ether\");\n    await contract.methods\n      .createReservation(checkInDateUnix, checkOutDateUnix, roomNumber)\n      .send({ from: accounts[0], value: totalPriceWei });\n    setReservations([\n      ...reservations,\n      {\n        guest: accounts[0],\n        checkInDate: checkInDateUnix,\n        checkOutDate: checkOutDateUnix,\n        roomNumber,\n        totalPrice: totalPriceWei,\n        paid: true,\n      },\n    ]);\n  };\n\n  const payReservation = async (reservationId) => {\n    const reservation = reservations[reservationId];\n    await contract.methods\n      .payReservation(reservationId)\n      .send({ from: accounts[0] });\n    reservation.paid = true;\n    setReservations([\n      ...reservations.slice(0, reservationId),\n      reservation,\n      ...reservations.slice(reservationId + 1),\n    ]);\n  };\n\n  if (!web3) {\n    return (\n      <div>\n        <button onClick={loadWeb3}>Connect to MetaMask</button>\n      </div>\n    );\n  }\n\n  return (\n    <div class=\"background\">\n       <br/>\n    <div class=\"back\">\n      \n      <h1 class=\"heading\"><i>ChainStay- Booking Room dApp</i></h1>\n        <h2 class=\"labh\">Create a Reservation</h2>\n\n        <label class=\"lab\">Check-in Date:</label>\n        <input class=\"inputs\"\n          type=\"date\"\n          value={checkInDate}\n          onChange={(e) => setCheckInDate(e.target.value)}\n        />\n        <br />\n        <label class=\"lab\">Check-out Date:</label>\n        <input class=\"inputs\"\n          type=\"date\"\n          value={checkOutDate}\n          onChange={(e) => setCheckOutDate(e.target.value)}\n        />\n        <br />\n        <label class=\"lab\">Room Number:</label>\n        <input class=\"inputs\"\n          type=\"number\"\n          min=\"1\"\n          max=\"10\"\n          value={roomNumber}\n          onChange={(e) => setRoomNumber(parseInt(e.target.value))}\n        />\n        <br />\n        <label class=\"lab\">Total Price:</label>\n        <input class=\"inputs\"\n          type=\"number\"\n          step=\"0.01\"\n          value={totalPrice}\n          onChange={(e) => setTotalPrice(parseFloat(e.target.value))}\n        />\n        <br />\n        <button class=\"reserve-button\" onClick={createReservation}>Create Reservation</button>\n        <br/>\n        <br/>\n      </div>\n      <div>\n        <h2 class=\"res_head\"><u>Reservations</u></h2>\n        <table border=\"1\" class=\"edit back\">\n          <thead>\n            <tr class=\"tr\">\n              <th class=\"th\">Guest</th>\n              <th class=\"th\">Check-in Date</th>\n              <th class=\"th\">Check-out Date</th>\n              <th class=\"th\">Room Number</th>\n              <th class=\"th\">Total Price</th>\n              <th class=\"th\">Paid</th>\n              <th class=\"th\">Action</th>\n            </tr>\n          </thead>\n          <tbody>\n            {reservations.map((reservation, index) => (\n              <tr key={index}>\n                <td>{reservation.guest}</td>\n                <td>\n                  {new Date(\n                    reservation.checkInDate * 1000\n                  ).toLocaleDateString()}\n                </td>\n                <td>\n                  {new Date(\n                    reservation.checkOutDate * 1000\n                  ).toLocaleDateString()}\n                </td>\n                <td>{reservation.roomNumber}</td>\n                <td>\n                  {web3.utils.fromWei(\n                    reservation.totalPrice.toString(),\n                    \"ether\"\n                  )}\n                </td>\n                <td>{reservation.paid ? \"Yes\" : \"No\"}</td>\n                <td>\n                  {!reservation.paid && (\n                    <button onClick={() => payReservation(index)}>Pay</button>\n                  )}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n        <br />\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}