{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\truffleproj\\\\healthdapp\\\\trialhealth\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n/*\nimport React, { useState } from \"react\";\nimport Web3 from \"web3\";\nimport MedicalRecordContract from \"../src/contractscopy/MedicalRecord.json\";\n\nconst web3 = new Web3(Web3.givenProvider);\nconst contractAddress = \"YOUR_CONTRACT_ADDRESS_HERE\";\n\nfunction App() {\n  const [name, setName] = useState(\"\");\n  const [diagnosis, setDiagnosis] = useState(\"\");\n  const [treatment, setTreatment] = useState(\"\");\n  const [recordId, setRecordId] = useState(0);\n  const [record, setRecord] = useState({});\n\n  async function createRecord() {\n    const contract = new web3.eth.Contract(MedicalRecordContract.abi, contractAddress);\n    const accounts = await web3.eth.requestAccounts();\n    const account = accounts[0];\n    await contract.methods.createRecord(name, diagnosis, treatment).send({ from: account });\n  }\n\n  async function getRecord() {\n    const contract = new web3.eth.Contract(MedicalRecordContract.abi, contractAddress);\n    const result = await contract.methods.getRecord(recordId).call();\n    setRecord({ name: result[0], diagnosis: result[1], treatment: result[2], date: result[3] });\n  }\n\n  return (\n    <div>\n      <h1>Medical Records Management</h1>\n      <div>\n        <h2>Create Patient Record</h2>\n        <label>\n          Name:\n          <input type=\"text\" value={name} onChange={(e) => setName(e.target.value)} />\n        </label>\n        <br />\n        <label>\n          Diagnosis:\n          <input type=\"text\" value={diagnosis} onChange={(e) => setDiagnosis(e.target.value)} />\n        </label>\n        <br />\n        <label>\n          Treatment:\n          <input type=\"text\" value={treatment} onChange={(e) => setTreatment(e.target.value)} />\n        </label>\n        <br />\n        <button onClick={createRecord}>Create Record</button>\n      </div>\n      <div>\n        <h2>Get Patient Record</h2>\n        <label>\n          Record ID:\n          <input type=\"number\" value={recordId} onChange={(e) => setRecordId(parseInt(e.target.value))} />\n        </label>\n        <br />\n        <button onClick={getRecord}>Get Record</button>\n        <br />\n        <label>\n          Name: {record.name}\n        </label>\n        <br />\n        <label>\n          Diagnosis: {record.diagnosis}\n        </label>\n        <br />\n        <label>\n          Treatment: {record.treatment}\n        </label>\n        <br />\n        <label>\n          Date: {new Date(record.date * 1000).toLocaleDateString()}\n        </label>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n*/\n\n/*\nimport React, { useState } from 'react';\nimport Web3 from 'web3';\nimport DoctorAppointment from '../src/contractscopy/MedicalRecord.json';\n\nconst web3 = new Web3(Web3.givenProvider);\n\nfunction App() {\n  const [doctorAppointment, setDoctorAppointment] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [day, setDay] = useState(0);\n  const [appointmentTime, setAppointmentTime] = useState(0);\n\n  const connectMetaMask = async () => {\n    try {\n      await window.ethereum.request({ method: 'eth_requestAccounts' });\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = DoctorAppointment.networks[networkId];\n      const instance = new web3.eth.Contract(\n        DoctorAppointment.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n      setDoctorAppointment(instance);\n      const accounts = await web3.eth.getAccounts();\n      setAccount(accounts[0]);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const bookAppointment = async () => {\n    const appointmentSlot = appointmentTime / doctorAppointment.appointmentDuration;\n    const isBooked = await doctorAppointment.methods.appointments(day, appointmentSlot).booked().call();\n    if (isBooked) {\n      alert('Appointment already booked');\n      return;\n    }\n    await doctorAppointment.methods.bookAppointment(day, appointmentTime).send({ from: account, value: doctorAppointment.appointmentFee });\n    alert('Appointment booked successfully');\n  };\n\n  const cancelAppointment = async () => {\n    const appointmentSlot = appointmentTime / doctorAppointment.appointmentDuration;\n    const appointment = await doctorAppointment.methods.appointments(day, appointmentSlot).call();\n    if (!appointment.booked) {\n      alert('No appointment found');\n      return;\n    }\n    if (appointment.patient.toLowerCase() !== account.toLowerCase()) {\n      alert('Only patient who booked the appointment can cancel it');\n      return;\n    }\n    if (appointment.paid) {\n      alert('Appointment fee already paid');\n      return;\n    }\n    await doctorAppointment.methods.cancelAppointment(day, appointmentTime).send({ from: account });\n    alert('Appointment canceled successfully');\n  };\n\n  return (\n    <div>\n      {account ? (\n        <div>\n          <p>Account: {account}</p>\n          <p>Appointment duration: {doctorAppointment?.appointmentDuration}</p>\n          <p>Appointment fee: {web3.utils.fromWei(doctorAppointment?.appointmentFee)} ETH</p>\n          <p>Max appointments per day: {doctorAppointment?.maxAppointmentsPerDay}</p>\n          <div>\n            <label>Day: </label>\n            <input type=\"number\" value={day} onChange={(e) => setDay(e.target.value)} />\n          </div>\n          <div>\n            <label>Appointment time: </label>\n            <input type=\"number\" value={appointmentTime} onChange={(e) => setAppointmentTime(e.target.value)} />\n          </div>\n          <button onClick={bookAppointment}>Book appointment</button>\n          <button onClick={cancelAppointment}>Cancel appointment</button>\n        </div>\n      ) : (\n        <button onClick={connectMetaMask}>Connect MetaMask</button>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n\n*/\n/*\nimport React, { useState } from 'react';\nimport Web3 from 'web3';\nimport DoctorAppointment from '../src/contractscopy/MedicalRecord.json';\n\nconst web3 = new Web3(Web3.givenProvider);\n\nfunction App() {\n  const [doctorAppointment, setDoctorAppointment] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [day, setDay] = useState(0);\n  const [appointmentTime, setAppointmentTime] = useState(0);\n\n  const connectMetaMask = async () => {\n    try {\n      await window.ethereum.request({ method: 'eth_requestAccounts' });\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = DoctorAppointment.networks[networkId];\n      const instance = new web3.eth.Contract(\n        DoctorAppointment.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n      setDoctorAppointment(instance);\n      const accounts = await web3.eth.getAccounts();\n      setAccount(accounts[0]);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const bookAppointment = async () => {\n    const appointmentSlot = appointmentTime / doctorAppointment.appointmentDuration;\n    const isBooked = await doctorAppointment.methods.appointments(day, appointmentSlot).booked().call();\n    if (isBooked) {\n      alert('Appointment already booked');\n      return;\n    }\n    await doctorAppointment.methods.bookAppointment(day.toString(), appointmentTime.toString()).send({ from: account, value: doctorAppointment && doctorAppointment.appointmentFee && doctorAppointment.appointmentFee.toString() });\n    alert('Appointment booked successfully');\n  };\n\n  const cancelAppointment = async () => {\n    const appointmentSlot = appointmentTime / doctorAppointment.appointmentDuration;\n    const appointment = await doctorAppointment.methods.appointments(day, appointmentSlot).call();\n    if (!appointment.booked) {\n      alert('No appointment found');\n      return;\n    }\n    if (appointment.patient.toLowerCase() !== account.toLowerCase()) {\n      alert('Only patient who booked the appointment can cancel it');\n      return;\n    }\n    if (appointment.paid) {\n      alert('Appointment fee already paid');\n      return;\n    }\n    await doctorAppointment.methods.cancelAppointment(day.toString(), appointmentTime.toString()).send({ from: account });\n    alert('Appointment canceled successfully');\n  };\n\n  return (\n    <div>\n      {account ? (\n        <div>\n          <p>Account: {account}</p>\n          <p>Appointment duration: {doctorAppointment?.appointmentDuration}</p>\n          <p>Appointment fee: {web3.utils.fromWei(doctorAppointment && doctorAppointment.appointmentFee && doctorAppointment.appointmentFee.toString())} ETH</p>\n          <p>Max appointments per day: {doctorAppointment?.maxAppointmentsPerDay}</p>\n          <div>\n            <label>Day: </label>\n            <input type=\"number\" value={day} onChange={(e) => setDay(e.target.value)} />\n          </div>\n          <div>\n            <label>Appointment time: </label>\n            <input type=\"number\" value={appointmentTime} onChange={(e) => setAppointmentTime(e.target.value)} />\n          </div>\n          <button onClick={bookAppointment}>Book appointment</button>\n          <button onClick={cancelAppointment}>Cancel appointment</button>\n          </div>\n      ) : (\n        <button onClick={connectMetaMask}>Connect with MetaMask</button>\n      )}\n    </div>\n  );\n}\nexport default App;\n\n*/\n\n/*\nimport React, { useState } from \"react\";\nimport Web3 from \"web3\";\nimport BookingAppointement from \"./contracts/BookingAppointement.json\";\n\nconst web3 = new Web3(Web3.givenProvider);\n\nfunction App() {\n  const [bookingAppointement, setBookingAppointement] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [appointmentDate, setAppointmentDate] = useState(\"\");\n  const [checkOutDate, setCheckOutDate] = useState(\"\");\n  const [appointments, setAppointments] = useState([]);\n\n  const connectMetaMask = async () => {\n    try {\n      await window.ethereum.request({ method: \"eth_requestAccounts\" });\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = BookingAppointement.networks[networkId];\n      const instance = new web3.eth.Contract(\n        BookingAppointement.abi,\n        deployedNetwork && deployedNetwork.address\n      );\n      setBookingAppointement(instance);\n      const accounts = await web3.eth.getAccounts();\n      setAccount(accounts[0]);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const createAppointments = async () => {\n    const totalPrice =\n      (checkOutDate - appointmentDate) *\n      web3.utils.toWei(\n        \"1\", // 1 ETH per appointment\n        \"ether\"\n      );\n    await bookingAppointement.methods\n      .createAppointments(appointmentDate, checkOutDate)\n      .send({ from: account, value: totalPrice });\n    alert(\"Appointments created successfully\");\n  };\n\n  const payAppointments = async (appointmentsId) => {\n    await bookingAppointement.methods.payAppointments(appointmentsId).send({\n      from: account,\n    });\n    alert(\"Appointments paid successfully\");\n  };\n\n  const loadAppointments = async () => {\n    const appointmentCount = await bookingAppointement.methods\n      .appointmentCount()\n      .call();\n    const loadedAppointments = [];\n    for (let i = 0; i < appointmentCount; i++) {\n      const appointment = await bookingAppointement.methods\n        .appointment(i)\n        .call();\n      loadedAppointments.push(appointment);\n    }\n    setAppointments(loadedAppointments);\n  };\n\n  return (\n    <div>\n      {account ? (\n        <div>\n          <p>Account: {account}</p>\n          <input\n            type=\"datetime-local\"\n            value={appointmentDate}\n            onChange={(e) => setAppointmentDate(e.target.valueAsNumber)}\n          />\n          <input\n            type=\"datetime-local\"\n            value={checkOutDate}\n            onChange={(e) => setCheckOutDate(e.target.valueAsNumber)}\n          />\n          <button onClick={createAppointments}>Create Appointments</button>\n          <button onClick={loadAppointments}>Load Appointments</button>\n          <ul>\n            {appointments.map((appointment, index) => (\n              <li key={index}>\n                {`Patient: ${appointment.patient}`}\n                {`Appointment Date: ${new Date(\n                  appointment.appointmentDate * 1000\n                ).toLocaleString()}`}\n                {`Check-out Date: ${new Date(\n                  appointment.checkOutDate * 1000\n                ).toLocaleString()}`}\n                {`Total Price: ${web3.utils.fromWei(\n                  appointment.totalPrice.toString(),\n                  \"ether\"\n                )} ETH`}\n                {appointment.paid ? (\n                  <span>Appointments Paid</span>\n                ) : (\n                  <button onClick={() => payAppointments(index)}>\n                    Pay Appointments\n                  </button>\n                )}\n              </li>\n            ))}\n          </ul>\n        </div>\n      ) : (\n        <button onClick={connectMetaMask}>Connect to MetaMask</button>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n*/\n/*\nimport React, { useState } from \"react\";\nimport Web3 from \"web3\";\nimport AppointmentBooking from \"../src/contractscopy/AppointmentBooking.json\";\n\nconst web3 = new Web3(Web3.givenProvider);\n\nfunction App() {\n  const [appointments, setAppointments] = useState([]);\n  const [appointmentDate, setAppointmentDate] = useState(\"\");\n\n  const bookAppointment = async () => {\n    const appointmentTimestamp = Date.parse(appointmentDate) / 1000;\n    await appointmentBooking.methods.bookAppointment(appointmentTimestamp).send({\n      from: account,\n      value: web3.utils.toWei(\"1\", \"ether\"),\n    });\n    alert(\"Appointment booked successfully\");\n  };\n\n  const loadAppointments = async () => {\n    const appointmentCount = await appointmentBooking.methods.appointmentCount().call();\n    const loadedAppointments = [];\n    for (let i = 0; i < appointmentCount; i++) {\n      const appointment = await appointmentBooking.methods.appointments(i).call();\n      loadedAppointments.push(appointment);\n    }\n    setAppointments(loadedAppointments);\n  };\n\n  const getAvailableAppointments = () => {\n    const availableAppointments = appointments.filter(\n      (appointment) => !appointment.booked && appointment.date > Date.now() / 1000\n    );\n    return availableAppointments;\n  };\n\n  return (\n    <div>\n      <input\n        type=\"datetime-local\"\n        value={appointmentDate}\n        onChange={(e) => setAppointmentDate(e.target.value)}\n      />\n      <button onClick={bookAppointment}>Book Appointment</button>\n      <button onClick={loadAppointments}>Load Appointments</button>\n      <ul>\n        {getAvailableAppointments().map((appointment, index) => (\n          <li key={index}>\n            {`Patient: ${appointment.patient}`}\n            {`Appointment Date: ${new Date(\n              appointment.date * 1000\n            ).toLocaleString()}`}\n            {appointment.booked ? (\n              <span>Appointment Booked</span>\n            ) : (\n              <span>Available</span>\n            )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\n\nexport default App;*/\n\nimport React, { useState, useEffect } from 'react';\nimport Web3 from 'web3';\nimport Consultation from '../src/contractscopy/Consultation.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [web3, setWeb3] = useState(undefined);\n  const [accounts, setAccounts] = useState([]);\n  const [contract, setContract] = useState(undefined);\n  const [consultant, setConsultant] = useState(undefined);\n  const [consultationFee, setConsultationFee] = useState(undefined);\n  const [balance, setBalance] = useState(undefined);\n  useEffect(() => {\n    const init = async () => {\n      try {\n        // Check if Web3 is injected by the browser\n        if (typeof window.ethereum !== 'undefined') {\n          const web3Instance = new Web3(window.ethereum);\n          await window.ethereum.enable();\n          setWeb3(web3Instance);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    init();\n  }, []);\n  useEffect(() => {\n    const loadAccounts = async () => {\n      const accounts = await web3.eth.getAccounts();\n      setAccounts(accounts);\n    };\n    if (web3) {\n      loadAccounts();\n    }\n  }, [web3]);\n  useEffect(() => {\n    const loadContract = async () => {\n      const networkId = await web3.eth.net.getId();\n      const networkData = Consultation.networks[networkId];\n      if (networkData) {\n        const contract = new web3.eth.Contract(Consultation.abi, networkData.address);\n        setContract(contract);\n        const consultant = await contract.methods.consultant().call();\n        setConsultant(consultant);\n        const consultationFee = await contract.methods.consultationFee().call();\n        setConsultationFee(consultationFee);\n        const balance = await web3.eth.getBalance(networkData.address);\n        setBalance(balance);\n      } else {\n        window.alert('Contract not deployed to detected network.');\n      }\n    };\n    if (web3) {\n      loadContract();\n    }\n  }, [web3]);\n  const handleStartConsultation = async () => {\n    try {\n      const payment = web3.utils.toWei(consultationFee.toString(), 'ether');\n      await contract.methods.startConsultation().send({\n        from: accounts[0],\n        value: payment\n      });\n      window.alert('Consultation started successfully.');\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const handleEndConsultation = async () => {\n    try {\n      await contract.methods.endConsultation().send({\n        from: consultant\n      });\n      window.alert('Consultation ended successfully.');\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  if (!web3) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading Web3, accounts, and contract...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 526,\n      columnNumber: 8\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Consultation Contract\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 531,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Consultant: \", consultant]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 532,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Consultation Fee: \", web3.utils.fromWei(consultationFee.toString(), 'ether'), \" ETH\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 533,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Contract Balance: \", web3.utils.fromWei(balance.toString(), 'ether'), \" ETH\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 534,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleStartConsultation,\n      children: \"Start Consultation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 535,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleEndConsultation,\n      children: \"End Consultation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 536,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 530,\n    columnNumber: 1\n  }, this);\n}\n_s(App, \"g67apVIHJJSGbsSX2bU4PapVthU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Web3","Consultation","jsxDEV","_jsxDEV","App","_s","web3","setWeb3","undefined","accounts","setAccounts","contract","setContract","consultant","setConsultant","consultationFee","setConsultationFee","balance","setBalance","init","window","ethereum","web3Instance","enable","error","console","loadAccounts","eth","getAccounts","loadContract","networkId","net","getId","networkData","networks","Contract","abi","address","methods","call","getBalance","alert","handleStartConsultation","payment","utils","toWei","toString","startConsultation","send","from","value","handleEndConsultation","endConsultation","children","fileName","_jsxFileName","lineNumber","columnNumber","className","fromWei","onClick","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Desktop/truffleproj/healthdapp/trialhealth/src/App.js"],"sourcesContent":["/*\nimport React, { useState } from \"react\";\nimport Web3 from \"web3\";\nimport MedicalRecordContract from \"../src/contractscopy/MedicalRecord.json\";\n\nconst web3 = new Web3(Web3.givenProvider);\nconst contractAddress = \"YOUR_CONTRACT_ADDRESS_HERE\";\n\nfunction App() {\n  const [name, setName] = useState(\"\");\n  const [diagnosis, setDiagnosis] = useState(\"\");\n  const [treatment, setTreatment] = useState(\"\");\n  const [recordId, setRecordId] = useState(0);\n  const [record, setRecord] = useState({});\n\n  async function createRecord() {\n    const contract = new web3.eth.Contract(MedicalRecordContract.abi, contractAddress);\n    const accounts = await web3.eth.requestAccounts();\n    const account = accounts[0];\n    await contract.methods.createRecord(name, diagnosis, treatment).send({ from: account });\n  }\n\n  async function getRecord() {\n    const contract = new web3.eth.Contract(MedicalRecordContract.abi, contractAddress);\n    const result = await contract.methods.getRecord(recordId).call();\n    setRecord({ name: result[0], diagnosis: result[1], treatment: result[2], date: result[3] });\n  }\n\n  return (\n    <div>\n      <h1>Medical Records Management</h1>\n      <div>\n        <h2>Create Patient Record</h2>\n        <label>\n          Name:\n          <input type=\"text\" value={name} onChange={(e) => setName(e.target.value)} />\n        </label>\n        <br />\n        <label>\n          Diagnosis:\n          <input type=\"text\" value={diagnosis} onChange={(e) => setDiagnosis(e.target.value)} />\n        </label>\n        <br />\n        <label>\n          Treatment:\n          <input type=\"text\" value={treatment} onChange={(e) => setTreatment(e.target.value)} />\n        </label>\n        <br />\n        <button onClick={createRecord}>Create Record</button>\n      </div>\n      <div>\n        <h2>Get Patient Record</h2>\n        <label>\n          Record ID:\n          <input type=\"number\" value={recordId} onChange={(e) => setRecordId(parseInt(e.target.value))} />\n        </label>\n        <br />\n        <button onClick={getRecord}>Get Record</button>\n        <br />\n        <label>\n          Name: {record.name}\n        </label>\n        <br />\n        <label>\n          Diagnosis: {record.diagnosis}\n        </label>\n        <br />\n        <label>\n          Treatment: {record.treatment}\n        </label>\n        <br />\n        <label>\n          Date: {new Date(record.date * 1000).toLocaleDateString()}\n        </label>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n*/\n\n/*\nimport React, { useState } from 'react';\nimport Web3 from 'web3';\nimport DoctorAppointment from '../src/contractscopy/MedicalRecord.json';\n\nconst web3 = new Web3(Web3.givenProvider);\n\nfunction App() {\n  const [doctorAppointment, setDoctorAppointment] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [day, setDay] = useState(0);\n  const [appointmentTime, setAppointmentTime] = useState(0);\n\n  const connectMetaMask = async () => {\n    try {\n      await window.ethereum.request({ method: 'eth_requestAccounts' });\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = DoctorAppointment.networks[networkId];\n      const instance = new web3.eth.Contract(\n        DoctorAppointment.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n      setDoctorAppointment(instance);\n      const accounts = await web3.eth.getAccounts();\n      setAccount(accounts[0]);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const bookAppointment = async () => {\n    const appointmentSlot = appointmentTime / doctorAppointment.appointmentDuration;\n    const isBooked = await doctorAppointment.methods.appointments(day, appointmentSlot).booked().call();\n    if (isBooked) {\n      alert('Appointment already booked');\n      return;\n    }\n    await doctorAppointment.methods.bookAppointment(day, appointmentTime).send({ from: account, value: doctorAppointment.appointmentFee });\n    alert('Appointment booked successfully');\n  };\n\n  const cancelAppointment = async () => {\n    const appointmentSlot = appointmentTime / doctorAppointment.appointmentDuration;\n    const appointment = await doctorAppointment.methods.appointments(day, appointmentSlot).call();\n    if (!appointment.booked) {\n      alert('No appointment found');\n      return;\n    }\n    if (appointment.patient.toLowerCase() !== account.toLowerCase()) {\n      alert('Only patient who booked the appointment can cancel it');\n      return;\n    }\n    if (appointment.paid) {\n      alert('Appointment fee already paid');\n      return;\n    }\n    await doctorAppointment.methods.cancelAppointment(day, appointmentTime).send({ from: account });\n    alert('Appointment canceled successfully');\n  };\n\n  return (\n    <div>\n      {account ? (\n        <div>\n          <p>Account: {account}</p>\n          <p>Appointment duration: {doctorAppointment?.appointmentDuration}</p>\n          <p>Appointment fee: {web3.utils.fromWei(doctorAppointment?.appointmentFee)} ETH</p>\n          <p>Max appointments per day: {doctorAppointment?.maxAppointmentsPerDay}</p>\n          <div>\n            <label>Day: </label>\n            <input type=\"number\" value={day} onChange={(e) => setDay(e.target.value)} />\n          </div>\n          <div>\n            <label>Appointment time: </label>\n            <input type=\"number\" value={appointmentTime} onChange={(e) => setAppointmentTime(e.target.value)} />\n          </div>\n          <button onClick={bookAppointment}>Book appointment</button>\n          <button onClick={cancelAppointment}>Cancel appointment</button>\n        </div>\n      ) : (\n        <button onClick={connectMetaMask}>Connect MetaMask</button>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n\n*/\n/*\nimport React, { useState } from 'react';\nimport Web3 from 'web3';\nimport DoctorAppointment from '../src/contractscopy/MedicalRecord.json';\n\nconst web3 = new Web3(Web3.givenProvider);\n\nfunction App() {\n  const [doctorAppointment, setDoctorAppointment] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [day, setDay] = useState(0);\n  const [appointmentTime, setAppointmentTime] = useState(0);\n\n  const connectMetaMask = async () => {\n    try {\n      await window.ethereum.request({ method: 'eth_requestAccounts' });\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = DoctorAppointment.networks[networkId];\n      const instance = new web3.eth.Contract(\n        DoctorAppointment.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n      setDoctorAppointment(instance);\n      const accounts = await web3.eth.getAccounts();\n      setAccount(accounts[0]);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const bookAppointment = async () => {\n    const appointmentSlot = appointmentTime / doctorAppointment.appointmentDuration;\n    const isBooked = await doctorAppointment.methods.appointments(day, appointmentSlot).booked().call();\n    if (isBooked) {\n      alert('Appointment already booked');\n      return;\n    }\n    await doctorAppointment.methods.bookAppointment(day.toString(), appointmentTime.toString()).send({ from: account, value: doctorAppointment && doctorAppointment.appointmentFee && doctorAppointment.appointmentFee.toString() });\n    alert('Appointment booked successfully');\n  };\n\n  const cancelAppointment = async () => {\n    const appointmentSlot = appointmentTime / doctorAppointment.appointmentDuration;\n    const appointment = await doctorAppointment.methods.appointments(day, appointmentSlot).call();\n    if (!appointment.booked) {\n      alert('No appointment found');\n      return;\n    }\n    if (appointment.patient.toLowerCase() !== account.toLowerCase()) {\n      alert('Only patient who booked the appointment can cancel it');\n      return;\n    }\n    if (appointment.paid) {\n      alert('Appointment fee already paid');\n      return;\n    }\n    await doctorAppointment.methods.cancelAppointment(day.toString(), appointmentTime.toString()).send({ from: account });\n    alert('Appointment canceled successfully');\n  };\n\n  return (\n    <div>\n      {account ? (\n        <div>\n          <p>Account: {account}</p>\n          <p>Appointment duration: {doctorAppointment?.appointmentDuration}</p>\n          <p>Appointment fee: {web3.utils.fromWei(doctorAppointment && doctorAppointment.appointmentFee && doctorAppointment.appointmentFee.toString())} ETH</p>\n          <p>Max appointments per day: {doctorAppointment?.maxAppointmentsPerDay}</p>\n          <div>\n            <label>Day: </label>\n            <input type=\"number\" value={day} onChange={(e) => setDay(e.target.value)} />\n          </div>\n          <div>\n            <label>Appointment time: </label>\n            <input type=\"number\" value={appointmentTime} onChange={(e) => setAppointmentTime(e.target.value)} />\n          </div>\n          <button onClick={bookAppointment}>Book appointment</button>\n          <button onClick={cancelAppointment}>Cancel appointment</button>\n          </div>\n      ) : (\n        <button onClick={connectMetaMask}>Connect with MetaMask</button>\n      )}\n    </div>\n  );\n}\nexport default App;\n\n*/\n\n/*\nimport React, { useState } from \"react\";\nimport Web3 from \"web3\";\nimport BookingAppointement from \"./contracts/BookingAppointement.json\";\n\nconst web3 = new Web3(Web3.givenProvider);\n\nfunction App() {\n  const [bookingAppointement, setBookingAppointement] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [appointmentDate, setAppointmentDate] = useState(\"\");\n  const [checkOutDate, setCheckOutDate] = useState(\"\");\n  const [appointments, setAppointments] = useState([]);\n\n  const connectMetaMask = async () => {\n    try {\n      await window.ethereum.request({ method: \"eth_requestAccounts\" });\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = BookingAppointement.networks[networkId];\n      const instance = new web3.eth.Contract(\n        BookingAppointement.abi,\n        deployedNetwork && deployedNetwork.address\n      );\n      setBookingAppointement(instance);\n      const accounts = await web3.eth.getAccounts();\n      setAccount(accounts[0]);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const createAppointments = async () => {\n    const totalPrice =\n      (checkOutDate - appointmentDate) *\n      web3.utils.toWei(\n        \"1\", // 1 ETH per appointment\n        \"ether\"\n      );\n    await bookingAppointement.methods\n      .createAppointments(appointmentDate, checkOutDate)\n      .send({ from: account, value: totalPrice });\n    alert(\"Appointments created successfully\");\n  };\n\n  const payAppointments = async (appointmentsId) => {\n    await bookingAppointement.methods.payAppointments(appointmentsId).send({\n      from: account,\n    });\n    alert(\"Appointments paid successfully\");\n  };\n\n  const loadAppointments = async () => {\n    const appointmentCount = await bookingAppointement.methods\n      .appointmentCount()\n      .call();\n    const loadedAppointments = [];\n    for (let i = 0; i < appointmentCount; i++) {\n      const appointment = await bookingAppointement.methods\n        .appointment(i)\n        .call();\n      loadedAppointments.push(appointment);\n    }\n    setAppointments(loadedAppointments);\n  };\n\n  return (\n    <div>\n      {account ? (\n        <div>\n          <p>Account: {account}</p>\n          <input\n            type=\"datetime-local\"\n            value={appointmentDate}\n            onChange={(e) => setAppointmentDate(e.target.valueAsNumber)}\n          />\n          <input\n            type=\"datetime-local\"\n            value={checkOutDate}\n            onChange={(e) => setCheckOutDate(e.target.valueAsNumber)}\n          />\n          <button onClick={createAppointments}>Create Appointments</button>\n          <button onClick={loadAppointments}>Load Appointments</button>\n          <ul>\n            {appointments.map((appointment, index) => (\n              <li key={index}>\n                {`Patient: ${appointment.patient}`}\n                {`Appointment Date: ${new Date(\n                  appointment.appointmentDate * 1000\n                ).toLocaleString()}`}\n                {`Check-out Date: ${new Date(\n                  appointment.checkOutDate * 1000\n                ).toLocaleString()}`}\n                {`Total Price: ${web3.utils.fromWei(\n                  appointment.totalPrice.toString(),\n                  \"ether\"\n                )} ETH`}\n                {appointment.paid ? (\n                  <span>Appointments Paid</span>\n                ) : (\n                  <button onClick={() => payAppointments(index)}>\n                    Pay Appointments\n                  </button>\n                )}\n              </li>\n            ))}\n          </ul>\n        </div>\n      ) : (\n        <button onClick={connectMetaMask}>Connect to MetaMask</button>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n*/\n/*\nimport React, { useState } from \"react\";\nimport Web3 from \"web3\";\nimport AppointmentBooking from \"../src/contractscopy/AppointmentBooking.json\";\n\nconst web3 = new Web3(Web3.givenProvider);\n\nfunction App() {\n  const [appointments, setAppointments] = useState([]);\n  const [appointmentDate, setAppointmentDate] = useState(\"\");\n\n  const bookAppointment = async () => {\n    const appointmentTimestamp = Date.parse(appointmentDate) / 1000;\n    await appointmentBooking.methods.bookAppointment(appointmentTimestamp).send({\n      from: account,\n      value: web3.utils.toWei(\"1\", \"ether\"),\n    });\n    alert(\"Appointment booked successfully\");\n  };\n\n  const loadAppointments = async () => {\n    const appointmentCount = await appointmentBooking.methods.appointmentCount().call();\n    const loadedAppointments = [];\n    for (let i = 0; i < appointmentCount; i++) {\n      const appointment = await appointmentBooking.methods.appointments(i).call();\n      loadedAppointments.push(appointment);\n    }\n    setAppointments(loadedAppointments);\n  };\n\n  const getAvailableAppointments = () => {\n    const availableAppointments = appointments.filter(\n      (appointment) => !appointment.booked && appointment.date > Date.now() / 1000\n    );\n    return availableAppointments;\n  };\n\n  return (\n    <div>\n      <input\n        type=\"datetime-local\"\n        value={appointmentDate}\n        onChange={(e) => setAppointmentDate(e.target.value)}\n      />\n      <button onClick={bookAppointment}>Book Appointment</button>\n      <button onClick={loadAppointments}>Load Appointments</button>\n      <ul>\n        {getAvailableAppointments().map((appointment, index) => (\n          <li key={index}>\n            {`Patient: ${appointment.patient}`}\n            {`Appointment Date: ${new Date(\n              appointment.date * 1000\n            ).toLocaleString()}`}\n            {appointment.booked ? (\n              <span>Appointment Booked</span>\n            ) : (\n              <span>Available</span>\n            )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\n\nexport default App;*/\n\nimport React, { useState, useEffect } from 'react';\nimport Web3 from 'web3';\nimport Consultation from '../src/contractscopy/Consultation.json';\n\nfunction App() {\nconst [web3, setWeb3] = useState(undefined);\nconst [accounts, setAccounts] = useState([]);\nconst [contract, setContract] = useState(undefined);\nconst [consultant, setConsultant] = useState(undefined);\nconst [consultationFee, setConsultationFee] = useState(undefined);\nconst [balance, setBalance] = useState(undefined);\n\nuseEffect(() => {\nconst init = async () => {\ntry {\n// Check if Web3 is injected by the browser\nif (typeof window.ethereum !== 'undefined') {\nconst web3Instance = new Web3(window.ethereum);\nawait window.ethereum.enable();\nsetWeb3(web3Instance);\n}\n} catch (error) {\nconsole.error(error);\n}\n};\ninit();\n}, []);\n\nuseEffect(() => {\nconst loadAccounts = async () => {\nconst accounts = await web3.eth.getAccounts();\nsetAccounts(accounts);\n};\nif (web3) {\nloadAccounts();\n}\n}, [web3]);\n\nuseEffect(() => {\nconst loadContract = async () => {\nconst networkId = await web3.eth.net.getId();\nconst networkData = Consultation.networks[networkId];\nif (networkData) {\nconst contract = new web3.eth.Contract(Consultation.abi, networkData.address);\nsetContract(contract);\nconst consultant = await contract.methods.consultant().call();\nsetConsultant(consultant);\nconst consultationFee = await contract.methods.consultationFee().call();\nsetConsultationFee(consultationFee);\nconst balance = await web3.eth.getBalance(networkData.address);\nsetBalance(balance);\n} else {\nwindow.alert('Contract not deployed to detected network.');\n}\n};\nif (web3) {\nloadContract();\n}\n}, [web3]);\n\nconst handleStartConsultation = async () => {\ntry {\nconst payment = web3.utils.toWei(consultationFee.toString(), 'ether');\nawait contract.methods.startConsultation().send({ from: accounts[0], value: payment });\nwindow.alert('Consultation started successfully.');\n} catch (error) {\nconsole.error(error);\n}\n};\n\nconst handleEndConsultation = async () => {\ntry {\nawait contract.methods.endConsultation().send({ from: consultant });\nwindow.alert('Consultation ended successfully.');\n} catch (error) {\nconsole.error(error);\n}\n};\n\nif (!web3) {\nreturn <div>Loading Web3, accounts, and contract...</div>;\n}\n\nreturn (\n<div className=\"App\">\n<h1>Consultation Contract</h1>\n<p>Consultant: {consultant}</p>\n<p>Consultation Fee: {web3.utils.fromWei(consultationFee.toString(), 'ether')} ETH</p>\n<p>Contract Balance: {web3.utils.fromWei(balance.toString(), 'ether')} ETH</p>\n<button onClick={handleStartConsultation}>Start Consultation</button>\n<button onClick={handleEndConsultation}>End Consultation</button>\n</div>\n);\n}\n\nexport default App;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,MAAM;AACvB,OAAOC,YAAY,MAAM,wCAAwC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElE,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACf,MAAM,CAACC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"},"metadata":{},"sourceType":"module","externalDependencies":[]}