{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\truffleproj\\\\healthdapp\\\\trialhealth\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n/*\nimport React, { useState } from \"react\";\nimport Web3 from \"web3\";\nimport MedicalRecordContract from \"../src/contractscopy/MedicalRecord.json\";\n\nconst web3 = new Web3(Web3.givenProvider);\nconst contractAddress = \"YOUR_CONTRACT_ADDRESS_HERE\";\n\nfunction App() {\n  const [name, setName] = useState(\"\");\n  const [diagnosis, setDiagnosis] = useState(\"\");\n  const [treatment, setTreatment] = useState(\"\");\n  const [recordId, setRecordId] = useState(0);\n  const [record, setRecord] = useState({});\n\n  async function createRecord() {\n    const contract = new web3.eth.Contract(MedicalRecordContract.abi, contractAddress);\n    const accounts = await web3.eth.requestAccounts();\n    const account = accounts[0];\n    await contract.methods.createRecord(name, diagnosis, treatment).send({ from: account });\n  }\n\n  async function getRecord() {\n    const contract = new web3.eth.Contract(MedicalRecordContract.abi, contractAddress);\n    const result = await contract.methods.getRecord(recordId).call();\n    setRecord({ name: result[0], diagnosis: result[1], treatment: result[2], date: result[3] });\n  }\n\n  return (\n    <div>\n      <h1>Medical Records Management</h1>\n      <div>\n        <h2>Create Patient Record</h2>\n        <label>\n          Name:\n          <input type=\"text\" value={name} onChange={(e) => setName(e.target.value)} />\n        </label>\n        <br />\n        <label>\n          Diagnosis:\n          <input type=\"text\" value={diagnosis} onChange={(e) => setDiagnosis(e.target.value)} />\n        </label>\n        <br />\n        <label>\n          Treatment:\n          <input type=\"text\" value={treatment} onChange={(e) => setTreatment(e.target.value)} />\n        </label>\n        <br />\n        <button onClick={createRecord}>Create Record</button>\n      </div>\n      <div>\n        <h2>Get Patient Record</h2>\n        <label>\n          Record ID:\n          <input type=\"number\" value={recordId} onChange={(e) => setRecordId(parseInt(e.target.value))} />\n        </label>\n        <br />\n        <button onClick={getRecord}>Get Record</button>\n        <br />\n        <label>\n          Name: {record.name}\n        </label>\n        <br />\n        <label>\n          Diagnosis: {record.diagnosis}\n        </label>\n        <br />\n        <label>\n          Treatment: {record.treatment}\n        </label>\n        <br />\n        <label>\n          Date: {new Date(record.date * 1000).toLocaleDateString()}\n        </label>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n*/\n\n/*\nimport React, { useState } from 'react';\nimport Web3 from 'web3';\nimport DoctorAppointment from '../src/contractscopy/MedicalRecord.json';\n\nconst web3 = new Web3(Web3.givenProvider);\n\nfunction App() {\n  const [doctorAppointment, setDoctorAppointment] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [day, setDay] = useState(0);\n  const [appointmentTime, setAppointmentTime] = useState(0);\n\n  const connectMetaMask = async () => {\n    try {\n      await window.ethereum.request({ method: 'eth_requestAccounts' });\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = DoctorAppointment.networks[networkId];\n      const instance = new web3.eth.Contract(\n        DoctorAppointment.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n      setDoctorAppointment(instance);\n      const accounts = await web3.eth.getAccounts();\n      setAccount(accounts[0]);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const bookAppointment = async () => {\n    const appointmentSlot = appointmentTime / doctorAppointment.appointmentDuration;\n    const isBooked = await doctorAppointment.methods.appointments(day, appointmentSlot).booked().call();\n    if (isBooked) {\n      alert('Appointment already booked');\n      return;\n    }\n    await doctorAppointment.methods.bookAppointment(day, appointmentTime).send({ from: account, value: doctorAppointment.appointmentFee });\n    alert('Appointment booked successfully');\n  };\n\n  const cancelAppointment = async () => {\n    const appointmentSlot = appointmentTime / doctorAppointment.appointmentDuration;\n    const appointment = await doctorAppointment.methods.appointments(day, appointmentSlot).call();\n    if (!appointment.booked) {\n      alert('No appointment found');\n      return;\n    }\n    if (appointment.patient.toLowerCase() !== account.toLowerCase()) {\n      alert('Only patient who booked the appointment can cancel it');\n      return;\n    }\n    if (appointment.paid) {\n      alert('Appointment fee already paid');\n      return;\n    }\n    await doctorAppointment.methods.cancelAppointment(day, appointmentTime).send({ from: account });\n    alert('Appointment canceled successfully');\n  };\n\n  return (\n    <div>\n      {account ? (\n        <div>\n          <p>Account: {account}</p>\n          <p>Appointment duration: {doctorAppointment?.appointmentDuration}</p>\n          <p>Appointment fee: {web3.utils.fromWei(doctorAppointment?.appointmentFee)} ETH</p>\n          <p>Max appointments per day: {doctorAppointment?.maxAppointmentsPerDay}</p>\n          <div>\n            <label>Day: </label>\n            <input type=\"number\" value={day} onChange={(e) => setDay(e.target.value)} />\n          </div>\n          <div>\n            <label>Appointment time: </label>\n            <input type=\"number\" value={appointmentTime} onChange={(e) => setAppointmentTime(e.target.value)} />\n          </div>\n          <button onClick={bookAppointment}>Book appointment</button>\n          <button onClick={cancelAppointment}>Cancel appointment</button>\n        </div>\n      ) : (\n        <button onClick={connectMetaMask}>Connect MetaMask</button>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n\n*/\n/*\nimport React, { useState } from 'react';\nimport Web3 from 'web3';\nimport DoctorAppointment from '../src/contractscopy/MedicalRecord.json';\n\nconst web3 = new Web3(Web3.givenProvider);\n\nfunction App() {\n  const [doctorAppointment, setDoctorAppointment] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [day, setDay] = useState(0);\n  const [appointmentTime, setAppointmentTime] = useState(0);\n\n  const connectMetaMask = async () => {\n    try {\n      await window.ethereum.request({ method: 'eth_requestAccounts' });\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = DoctorAppointment.networks[networkId];\n      const instance = new web3.eth.Contract(\n        DoctorAppointment.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n      setDoctorAppointment(instance);\n      const accounts = await web3.eth.getAccounts();\n      setAccount(accounts[0]);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const bookAppointment = async () => {\n    const appointmentSlot = appointmentTime / doctorAppointment.appointmentDuration;\n    const isBooked = await doctorAppointment.methods.appointments(day, appointmentSlot).booked().call();\n    if (isBooked) {\n      alert('Appointment already booked');\n      return;\n    }\n    await doctorAppointment.methods.bookAppointment(day.toString(), appointmentTime.toString()).send({ from: account, value: doctorAppointment && doctorAppointment.appointmentFee && doctorAppointment.appointmentFee.toString() });\n    alert('Appointment booked successfully');\n  };\n\n  const cancelAppointment = async () => {\n    const appointmentSlot = appointmentTime / doctorAppointment.appointmentDuration;\n    const appointment = await doctorAppointment.methods.appointments(day, appointmentSlot).call();\n    if (!appointment.booked) {\n      alert('No appointment found');\n      return;\n    }\n    if (appointment.patient.toLowerCase() !== account.toLowerCase()) {\n      alert('Only patient who booked the appointment can cancel it');\n      return;\n    }\n    if (appointment.paid) {\n      alert('Appointment fee already paid');\n      return;\n    }\n    await doctorAppointment.methods.cancelAppointment(day.toString(), appointmentTime.toString()).send({ from: account });\n    alert('Appointment canceled successfully');\n  };\n\n  return (\n    <div>\n      {account ? (\n        <div>\n          <p>Account: {account}</p>\n          <p>Appointment duration: {doctorAppointment?.appointmentDuration}</p>\n          <p>Appointment fee: {web3.utils.fromWei(doctorAppointment && doctorAppointment.appointmentFee && doctorAppointment.appointmentFee.toString())} ETH</p>\n          <p>Max appointments per day: {doctorAppointment?.maxAppointmentsPerDay}</p>\n          <div>\n            <label>Day: </label>\n            <input type=\"number\" value={day} onChange={(e) => setDay(e.target.value)} />\n          </div>\n          <div>\n            <label>Appointment time: </label>\n            <input type=\"number\" value={appointmentTime} onChange={(e) => setAppointmentTime(e.target.value)} />\n          </div>\n          <button onClick={bookAppointment}>Book appointment</button>\n          <button onClick={cancelAppointment}>Cancel appointment</button>\n          </div>\n      ) : (\n        <button onClick={connectMetaMask}>Connect with MetaMask</button>\n      )}\n    </div>\n  );\n}\nexport default App;\n\n*/\n\n/*\nimport React, { useState } from \"react\";\nimport Web3 from \"web3\";\nimport BookingAppointement from \"./contracts/BookingAppointement.json\";\n\nconst web3 = new Web3(Web3.givenProvider);\n\nfunction App() {\n  const [bookingAppointement, setBookingAppointement] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [appointmentDate, setAppointmentDate] = useState(\"\");\n  const [checkOutDate, setCheckOutDate] = useState(\"\");\n  const [appointments, setAppointments] = useState([]);\n\n  const connectMetaMask = async () => {\n    try {\n      await window.ethereum.request({ method: \"eth_requestAccounts\" });\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = BookingAppointement.networks[networkId];\n      const instance = new web3.eth.Contract(\n        BookingAppointement.abi,\n        deployedNetwork && deployedNetwork.address\n      );\n      setBookingAppointement(instance);\n      const accounts = await web3.eth.getAccounts();\n      setAccount(accounts[0]);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const createAppointments = async () => {\n    const totalPrice =\n      (checkOutDate - appointmentDate) *\n      web3.utils.toWei(\n        \"1\", // 1 ETH per appointment\n        \"ether\"\n      );\n    await bookingAppointement.methods\n      .createAppointments(appointmentDate, checkOutDate)\n      .send({ from: account, value: totalPrice });\n    alert(\"Appointments created successfully\");\n  };\n\n  const payAppointments = async (appointmentsId) => {\n    await bookingAppointement.methods.payAppointments(appointmentsId).send({\n      from: account,\n    });\n    alert(\"Appointments paid successfully\");\n  };\n\n  const loadAppointments = async () => {\n    const appointmentCount = await bookingAppointement.methods\n      .appointmentCount()\n      .call();\n    const loadedAppointments = [];\n    for (let i = 0; i < appointmentCount; i++) {\n      const appointment = await bookingAppointement.methods\n        .appointment(i)\n        .call();\n      loadedAppointments.push(appointment);\n    }\n    setAppointments(loadedAppointments);\n  };\n\n  return (\n    <div>\n      {account ? (\n        <div>\n          <p>Account: {account}</p>\n          <input\n            type=\"datetime-local\"\n            value={appointmentDate}\n            onChange={(e) => setAppointmentDate(e.target.valueAsNumber)}\n          />\n          <input\n            type=\"datetime-local\"\n            value={checkOutDate}\n            onChange={(e) => setCheckOutDate(e.target.valueAsNumber)}\n          />\n          <button onClick={createAppointments}>Create Appointments</button>\n          <button onClick={loadAppointments}>Load Appointments</button>\n          <ul>\n            {appointments.map((appointment, index) => (\n              <li key={index}>\n                {`Patient: ${appointment.patient}`}\n                {`Appointment Date: ${new Date(\n                  appointment.appointmentDate * 1000\n                ).toLocaleString()}`}\n                {`Check-out Date: ${new Date(\n                  appointment.checkOutDate * 1000\n                ).toLocaleString()}`}\n                {`Total Price: ${web3.utils.fromWei(\n                  appointment.totalPrice.toString(),\n                  \"ether\"\n                )} ETH`}\n                {appointment.paid ? (\n                  <span>Appointments Paid</span>\n                ) : (\n                  <button onClick={() => payAppointments(index)}>\n                    Pay Appointments\n                  </button>\n                )}\n              </li>\n            ))}\n          </ul>\n        </div>\n      ) : (\n        <button onClick={connectMetaMask}>Connect to MetaMask</button>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n*/\n/*\nimport React, { useState } from \"react\";\nimport Web3 from \"web3\";\nimport AppointmentBooking from \"../src/contractscopy/AppointmentBooking.json\";\n\nconst web3 = new Web3(Web3.givenProvider);\n\nfunction App() {\n  const [appointments, setAppointments] = useState([]);\n  const [appointmentDate, setAppointmentDate] = useState(\"\");\n\n  const bookAppointment = async () => {\n    const appointmentTimestamp = Date.parse(appointmentDate) / 1000;\n    await appointmentBooking.methods.bookAppointment(appointmentTimestamp).send({\n      from: account,\n      value: web3.utils.toWei(\"1\", \"ether\"),\n    });\n    alert(\"Appointment booked successfully\");\n  };\n\n  const loadAppointments = async () => {\n    const appointmentCount = await appointmentBooking.methods.appointmentCount().call();\n    const loadedAppointments = [];\n    for (let i = 0; i < appointmentCount; i++) {\n      const appointment = await appointmentBooking.methods.appointments(i).call();\n      loadedAppointments.push(appointment);\n    }\n    setAppointments(loadedAppointments);\n  };\n\n  const getAvailableAppointments = () => {\n    const availableAppointments = appointments.filter(\n      (appointment) => !appointment.booked && appointment.date > Date.now() / 1000\n    );\n    return availableAppointments;\n  };\n\n  return (\n    <div>\n      <input\n        type=\"datetime-local\"\n        value={appointmentDate}\n        onChange={(e) => setAppointmentDate(e.target.value)}\n      />\n      <button onClick={bookAppointment}>Book Appointment</button>\n      <button onClick={loadAppointments}>Load Appointments</button>\n      <ul>\n        {getAvailableAppointments().map((appointment, index) => (\n          <li key={index}>\n            {`Patient: ${appointment.patient}`}\n            {`Appointment Date: ${new Date(\n              appointment.date * 1000\n            ).toLocaleString()}`}\n            {appointment.booked ? (\n              <span>Appointment Booked</span>\n            ) : (\n              <span>Available</span>\n            )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\n\nexport default App;*/\n\nimport React, { useState, useEffect } from \"react\";\nimport Web3 from 'web3';\nimport Healthcare from '../src/contractscopy/Healthcare.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [patientAddress, setPatientAddress] = useState('');\n  const [medicalRecords, setMedicalRecords] = useState([]);\n  const [web3, setWeb3] = useState(null);\n  const [healthcareContract, setHealthcareContract] = useState(null);\n\n  // Initialize web3 and Healthcare contract\n  const initWeb3 = async () => {\n    if (window.ethereum) {\n      const web3Instance = new Web3(window.ethereum);\n      try {\n        await window.ethereum.enable();\n        setWeb3(web3Instance);\n        const networkId = await web3Instance.eth.net.getId();\n        const deployedNetwork = Healthcare.networks[networkId];\n        const healthcareInstance = new web3Instance.eth.Contract(Healthcare.abi, deployedNetwork && deployedNetwork.address);\n        setHealthcareContract(healthcareInstance);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  };\n\n  // Get medical records of the patient\n  const getMedicalRecords = async () => {\n    if (patientAddress && healthcareContract) {\n      try {\n        const records = await healthcareContract.methods.getMedicalRecords(patientAddress).call();\n        setMedicalRecords(records);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  };\n\n  // Handle input change\n  const handleInputChange = event => {\n    setPatientAddress(event.target.value);\n  };\n\n  // Handle form submit\n  const handleSubmit = event => {\n    event.preventDefault();\n    getMedicalRecords();\n  };\n\n  // Initialize web3 and Healthcare contract on component mount\n  useEffect(() => {\n    initWeb3();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Healthcare Application\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 508,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Patient Address:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: patientAddress,\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 512,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 510,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Get Medical Records\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 514,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 509,\n      columnNumber: 7\n    }, this), medicalRecords.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Medical Records\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 518,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: medicalRecords.map((record, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: record\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 521,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 519,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 517,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 507,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"xUkVUSLF9rSS93MTHdKgpM7gF5A=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Web3","Healthcare","jsxDEV","_jsxDEV","App","_s","patientAddress","setPatientAddress","medicalRecords","setMedicalRecords","web3","setWeb3","healthcareContract","setHealthcareContract","initWeb3","window","ethereum","web3Instance","enable","networkId","eth","net","getId","deployedNetwork","networks","healthcareInstance","Contract","abi","address","error","console","getMedicalRecords","records","methods","call","handleInputChange","event","target","value","handleSubmit","preventDefault","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onChange","length","map","record","index","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Desktop/truffleproj/healthdapp/trialhealth/src/App.js"],"sourcesContent":["/*\nimport React, { useState } from \"react\";\nimport Web3 from \"web3\";\nimport MedicalRecordContract from \"../src/contractscopy/MedicalRecord.json\";\n\nconst web3 = new Web3(Web3.givenProvider);\nconst contractAddress = \"YOUR_CONTRACT_ADDRESS_HERE\";\n\nfunction App() {\n  const [name, setName] = useState(\"\");\n  const [diagnosis, setDiagnosis] = useState(\"\");\n  const [treatment, setTreatment] = useState(\"\");\n  const [recordId, setRecordId] = useState(0);\n  const [record, setRecord] = useState({});\n\n  async function createRecord() {\n    const contract = new web3.eth.Contract(MedicalRecordContract.abi, contractAddress);\n    const accounts = await web3.eth.requestAccounts();\n    const account = accounts[0];\n    await contract.methods.createRecord(name, diagnosis, treatment).send({ from: account });\n  }\n\n  async function getRecord() {\n    const contract = new web3.eth.Contract(MedicalRecordContract.abi, contractAddress);\n    const result = await contract.methods.getRecord(recordId).call();\n    setRecord({ name: result[0], diagnosis: result[1], treatment: result[2], date: result[3] });\n  }\n\n  return (\n    <div>\n      <h1>Medical Records Management</h1>\n      <div>\n        <h2>Create Patient Record</h2>\n        <label>\n          Name:\n          <input type=\"text\" value={name} onChange={(e) => setName(e.target.value)} />\n        </label>\n        <br />\n        <label>\n          Diagnosis:\n          <input type=\"text\" value={diagnosis} onChange={(e) => setDiagnosis(e.target.value)} />\n        </label>\n        <br />\n        <label>\n          Treatment:\n          <input type=\"text\" value={treatment} onChange={(e) => setTreatment(e.target.value)} />\n        </label>\n        <br />\n        <button onClick={createRecord}>Create Record</button>\n      </div>\n      <div>\n        <h2>Get Patient Record</h2>\n        <label>\n          Record ID:\n          <input type=\"number\" value={recordId} onChange={(e) => setRecordId(parseInt(e.target.value))} />\n        </label>\n        <br />\n        <button onClick={getRecord}>Get Record</button>\n        <br />\n        <label>\n          Name: {record.name}\n        </label>\n        <br />\n        <label>\n          Diagnosis: {record.diagnosis}\n        </label>\n        <br />\n        <label>\n          Treatment: {record.treatment}\n        </label>\n        <br />\n        <label>\n          Date: {new Date(record.date * 1000).toLocaleDateString()}\n        </label>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n*/\n\n/*\nimport React, { useState } from 'react';\nimport Web3 from 'web3';\nimport DoctorAppointment from '../src/contractscopy/MedicalRecord.json';\n\nconst web3 = new Web3(Web3.givenProvider);\n\nfunction App() {\n  const [doctorAppointment, setDoctorAppointment] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [day, setDay] = useState(0);\n  const [appointmentTime, setAppointmentTime] = useState(0);\n\n  const connectMetaMask = async () => {\n    try {\n      await window.ethereum.request({ method: 'eth_requestAccounts' });\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = DoctorAppointment.networks[networkId];\n      const instance = new web3.eth.Contract(\n        DoctorAppointment.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n      setDoctorAppointment(instance);\n      const accounts = await web3.eth.getAccounts();\n      setAccount(accounts[0]);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const bookAppointment = async () => {\n    const appointmentSlot = appointmentTime / doctorAppointment.appointmentDuration;\n    const isBooked = await doctorAppointment.methods.appointments(day, appointmentSlot).booked().call();\n    if (isBooked) {\n      alert('Appointment already booked');\n      return;\n    }\n    await doctorAppointment.methods.bookAppointment(day, appointmentTime).send({ from: account, value: doctorAppointment.appointmentFee });\n    alert('Appointment booked successfully');\n  };\n\n  const cancelAppointment = async () => {\n    const appointmentSlot = appointmentTime / doctorAppointment.appointmentDuration;\n    const appointment = await doctorAppointment.methods.appointments(day, appointmentSlot).call();\n    if (!appointment.booked) {\n      alert('No appointment found');\n      return;\n    }\n    if (appointment.patient.toLowerCase() !== account.toLowerCase()) {\n      alert('Only patient who booked the appointment can cancel it');\n      return;\n    }\n    if (appointment.paid) {\n      alert('Appointment fee already paid');\n      return;\n    }\n    await doctorAppointment.methods.cancelAppointment(day, appointmentTime).send({ from: account });\n    alert('Appointment canceled successfully');\n  };\n\n  return (\n    <div>\n      {account ? (\n        <div>\n          <p>Account: {account}</p>\n          <p>Appointment duration: {doctorAppointment?.appointmentDuration}</p>\n          <p>Appointment fee: {web3.utils.fromWei(doctorAppointment?.appointmentFee)} ETH</p>\n          <p>Max appointments per day: {doctorAppointment?.maxAppointmentsPerDay}</p>\n          <div>\n            <label>Day: </label>\n            <input type=\"number\" value={day} onChange={(e) => setDay(e.target.value)} />\n          </div>\n          <div>\n            <label>Appointment time: </label>\n            <input type=\"number\" value={appointmentTime} onChange={(e) => setAppointmentTime(e.target.value)} />\n          </div>\n          <button onClick={bookAppointment}>Book appointment</button>\n          <button onClick={cancelAppointment}>Cancel appointment</button>\n        </div>\n      ) : (\n        <button onClick={connectMetaMask}>Connect MetaMask</button>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n\n*/\n/*\nimport React, { useState } from 'react';\nimport Web3 from 'web3';\nimport DoctorAppointment from '../src/contractscopy/MedicalRecord.json';\n\nconst web3 = new Web3(Web3.givenProvider);\n\nfunction App() {\n  const [doctorAppointment, setDoctorAppointment] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [day, setDay] = useState(0);\n  const [appointmentTime, setAppointmentTime] = useState(0);\n\n  const connectMetaMask = async () => {\n    try {\n      await window.ethereum.request({ method: 'eth_requestAccounts' });\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = DoctorAppointment.networks[networkId];\n      const instance = new web3.eth.Contract(\n        DoctorAppointment.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n      setDoctorAppointment(instance);\n      const accounts = await web3.eth.getAccounts();\n      setAccount(accounts[0]);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const bookAppointment = async () => {\n    const appointmentSlot = appointmentTime / doctorAppointment.appointmentDuration;\n    const isBooked = await doctorAppointment.methods.appointments(day, appointmentSlot).booked().call();\n    if (isBooked) {\n      alert('Appointment already booked');\n      return;\n    }\n    await doctorAppointment.methods.bookAppointment(day.toString(), appointmentTime.toString()).send({ from: account, value: doctorAppointment && doctorAppointment.appointmentFee && doctorAppointment.appointmentFee.toString() });\n    alert('Appointment booked successfully');\n  };\n\n  const cancelAppointment = async () => {\n    const appointmentSlot = appointmentTime / doctorAppointment.appointmentDuration;\n    const appointment = await doctorAppointment.methods.appointments(day, appointmentSlot).call();\n    if (!appointment.booked) {\n      alert('No appointment found');\n      return;\n    }\n    if (appointment.patient.toLowerCase() !== account.toLowerCase()) {\n      alert('Only patient who booked the appointment can cancel it');\n      return;\n    }\n    if (appointment.paid) {\n      alert('Appointment fee already paid');\n      return;\n    }\n    await doctorAppointment.methods.cancelAppointment(day.toString(), appointmentTime.toString()).send({ from: account });\n    alert('Appointment canceled successfully');\n  };\n\n  return (\n    <div>\n      {account ? (\n        <div>\n          <p>Account: {account}</p>\n          <p>Appointment duration: {doctorAppointment?.appointmentDuration}</p>\n          <p>Appointment fee: {web3.utils.fromWei(doctorAppointment && doctorAppointment.appointmentFee && doctorAppointment.appointmentFee.toString())} ETH</p>\n          <p>Max appointments per day: {doctorAppointment?.maxAppointmentsPerDay}</p>\n          <div>\n            <label>Day: </label>\n            <input type=\"number\" value={day} onChange={(e) => setDay(e.target.value)} />\n          </div>\n          <div>\n            <label>Appointment time: </label>\n            <input type=\"number\" value={appointmentTime} onChange={(e) => setAppointmentTime(e.target.value)} />\n          </div>\n          <button onClick={bookAppointment}>Book appointment</button>\n          <button onClick={cancelAppointment}>Cancel appointment</button>\n          </div>\n      ) : (\n        <button onClick={connectMetaMask}>Connect with MetaMask</button>\n      )}\n    </div>\n  );\n}\nexport default App;\n\n*/\n\n/*\nimport React, { useState } from \"react\";\nimport Web3 from \"web3\";\nimport BookingAppointement from \"./contracts/BookingAppointement.json\";\n\nconst web3 = new Web3(Web3.givenProvider);\n\nfunction App() {\n  const [bookingAppointement, setBookingAppointement] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [appointmentDate, setAppointmentDate] = useState(\"\");\n  const [checkOutDate, setCheckOutDate] = useState(\"\");\n  const [appointments, setAppointments] = useState([]);\n\n  const connectMetaMask = async () => {\n    try {\n      await window.ethereum.request({ method: \"eth_requestAccounts\" });\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = BookingAppointement.networks[networkId];\n      const instance = new web3.eth.Contract(\n        BookingAppointement.abi,\n        deployedNetwork && deployedNetwork.address\n      );\n      setBookingAppointement(instance);\n      const accounts = await web3.eth.getAccounts();\n      setAccount(accounts[0]);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const createAppointments = async () => {\n    const totalPrice =\n      (checkOutDate - appointmentDate) *\n      web3.utils.toWei(\n        \"1\", // 1 ETH per appointment\n        \"ether\"\n      );\n    await bookingAppointement.methods\n      .createAppointments(appointmentDate, checkOutDate)\n      .send({ from: account, value: totalPrice });\n    alert(\"Appointments created successfully\");\n  };\n\n  const payAppointments = async (appointmentsId) => {\n    await bookingAppointement.methods.payAppointments(appointmentsId).send({\n      from: account,\n    });\n    alert(\"Appointments paid successfully\");\n  };\n\n  const loadAppointments = async () => {\n    const appointmentCount = await bookingAppointement.methods\n      .appointmentCount()\n      .call();\n    const loadedAppointments = [];\n    for (let i = 0; i < appointmentCount; i++) {\n      const appointment = await bookingAppointement.methods\n        .appointment(i)\n        .call();\n      loadedAppointments.push(appointment);\n    }\n    setAppointments(loadedAppointments);\n  };\n\n  return (\n    <div>\n      {account ? (\n        <div>\n          <p>Account: {account}</p>\n          <input\n            type=\"datetime-local\"\n            value={appointmentDate}\n            onChange={(e) => setAppointmentDate(e.target.valueAsNumber)}\n          />\n          <input\n            type=\"datetime-local\"\n            value={checkOutDate}\n            onChange={(e) => setCheckOutDate(e.target.valueAsNumber)}\n          />\n          <button onClick={createAppointments}>Create Appointments</button>\n          <button onClick={loadAppointments}>Load Appointments</button>\n          <ul>\n            {appointments.map((appointment, index) => (\n              <li key={index}>\n                {`Patient: ${appointment.patient}`}\n                {`Appointment Date: ${new Date(\n                  appointment.appointmentDate * 1000\n                ).toLocaleString()}`}\n                {`Check-out Date: ${new Date(\n                  appointment.checkOutDate * 1000\n                ).toLocaleString()}`}\n                {`Total Price: ${web3.utils.fromWei(\n                  appointment.totalPrice.toString(),\n                  \"ether\"\n                )} ETH`}\n                {appointment.paid ? (\n                  <span>Appointments Paid</span>\n                ) : (\n                  <button onClick={() => payAppointments(index)}>\n                    Pay Appointments\n                  </button>\n                )}\n              </li>\n            ))}\n          </ul>\n        </div>\n      ) : (\n        <button onClick={connectMetaMask}>Connect to MetaMask</button>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n*/\n/*\nimport React, { useState } from \"react\";\nimport Web3 from \"web3\";\nimport AppointmentBooking from \"../src/contractscopy/AppointmentBooking.json\";\n\nconst web3 = new Web3(Web3.givenProvider);\n\nfunction App() {\n  const [appointments, setAppointments] = useState([]);\n  const [appointmentDate, setAppointmentDate] = useState(\"\");\n\n  const bookAppointment = async () => {\n    const appointmentTimestamp = Date.parse(appointmentDate) / 1000;\n    await appointmentBooking.methods.bookAppointment(appointmentTimestamp).send({\n      from: account,\n      value: web3.utils.toWei(\"1\", \"ether\"),\n    });\n    alert(\"Appointment booked successfully\");\n  };\n\n  const loadAppointments = async () => {\n    const appointmentCount = await appointmentBooking.methods.appointmentCount().call();\n    const loadedAppointments = [];\n    for (let i = 0; i < appointmentCount; i++) {\n      const appointment = await appointmentBooking.methods.appointments(i).call();\n      loadedAppointments.push(appointment);\n    }\n    setAppointments(loadedAppointments);\n  };\n\n  const getAvailableAppointments = () => {\n    const availableAppointments = appointments.filter(\n      (appointment) => !appointment.booked && appointment.date > Date.now() / 1000\n    );\n    return availableAppointments;\n  };\n\n  return (\n    <div>\n      <input\n        type=\"datetime-local\"\n        value={appointmentDate}\n        onChange={(e) => setAppointmentDate(e.target.value)}\n      />\n      <button onClick={bookAppointment}>Book Appointment</button>\n      <button onClick={loadAppointments}>Load Appointments</button>\n      <ul>\n        {getAvailableAppointments().map((appointment, index) => (\n          <li key={index}>\n            {`Patient: ${appointment.patient}`}\n            {`Appointment Date: ${new Date(\n              appointment.date * 1000\n            ).toLocaleString()}`}\n            {appointment.booked ? (\n              <span>Appointment Booked</span>\n            ) : (\n              <span>Available</span>\n            )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\n\nexport default App;*/\n\n\n\nimport React, { useState, useEffect } from \"react\";\nimport Web3 from 'web3';\nimport Healthcare from '../src/contractscopy/Healthcare.json';\n\nfunction App() {\n  const [patientAddress, setPatientAddress] = useState('');\n  const [medicalRecords, setMedicalRecords] = useState([]);\n  const [web3, setWeb3] = useState(null);\n  const [healthcareContract, setHealthcareContract] = useState(null);\n\n  // Initialize web3 and Healthcare contract\n  const initWeb3 = async () => {\n    if (window.ethereum) {\n      const web3Instance = new Web3(window.ethereum);\n      try {\n        await window.ethereum.enable();\n        setWeb3(web3Instance);\n        const networkId = await web3Instance.eth.net.getId();\n        const deployedNetwork = Healthcare.networks[networkId];\n        const healthcareInstance = new web3Instance.eth.Contract(\n          Healthcare.abi,\n          deployedNetwork && deployedNetwork.address,\n        );\n        setHealthcareContract(healthcareInstance);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  };\n\n  // Get medical records of the patient\n  const getMedicalRecords = async () => {\n    if (patientAddress && healthcareContract) {\n      try {\n        const records = await healthcareContract.methods.getMedicalRecords(patientAddress).call();\n        setMedicalRecords(records);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  };\n\n  // Handle input change\n  const handleInputChange = (event) => {\n    setPatientAddress(event.target.value);\n  };\n\n  // Handle form submit\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    getMedicalRecords();\n  };\n\n  // Initialize web3 and Healthcare contract on component mount\n  useEffect(() => {\n    initWeb3();\n  }, []);\n\n  return (\n    <div>\n      <h1>Healthcare Application</h1>\n      <form onSubmit={handleSubmit}>\n        <label>\n          Patient Address:\n          <input type=\"text\" value={patientAddress} onChange={handleInputChange} />\n        </label>\n        <button type=\"submit\">Get Medical Records</button>\n      </form>\n      {medicalRecords.length > 0 && (\n        <div>\n          <h2>Medical Records</h2>\n          <ul>\n            {medicalRecords.map((record, index) => (\n              <li key={index}>{record}</li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}